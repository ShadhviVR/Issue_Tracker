[{"D:\\Projects\\Issue_Tracker\\frontend\\src\\index.js":"1","D:\\Projects\\Issue_Tracker\\frontend\\src\\reportWebVitals.js":"2","D:\\Projects\\Issue_Tracker\\frontend\\src\\App.js":"3","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\Aside.js":"4","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\Main.js":"5","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\IconButton\\IconButton.js":"6","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\Dropdown.js":"7","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\Logo.js":"8","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\FixedButton\\FixedButton.js":"9","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\NotifyButton\\NotifyButton.js":"10","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\MainFooter\\MainFooter.js":"11","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\MainNav\\MainNav.js":"12","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\headers\\MainPageHeader\\MainPageHeader.js":"13","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Messages\\Messages.js":"14","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\Projects.js":"15","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\ProjectPage\\ProjectPage.js":"16","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Dashboard\\Dashboard.js":"17","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Reports\\Reports.js":"18","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Settings\\Settings.js":"19","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Task\\TaskPage.js":"20","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\DropdownOption.js":"21","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\ProjectBox.js":"22","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\ProjectPage\\ProjectTask.js":"23","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Messages\\MessageBox.js":"24","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Reports\\ReportBox.js":"25","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\ButtonStrong\\ButtonStrong.js":"26","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\notifications\\NotificationBubble\\NotificationBubble.js":"27","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Task\\TaskComment.js":"28","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\notifications\\EmptyNotification\\EmptyNotification.js":"29"},{"size":535,"mtime":1683790266424,"results":"30","hashOfConfig":"31"},{"size":362,"mtime":1683790266428,"results":"32","hashOfConfig":"31"},{"size":31739,"mtime":1683798976797,"results":"33","hashOfConfig":"31"},{"size":3491,"mtime":1683790265882,"results":"34","hashOfConfig":"31"},{"size":6082,"mtime":1683790833296,"results":"35","hashOfConfig":"31"},{"size":266,"mtime":1683790266512,"results":"36","hashOfConfig":"31"},{"size":3524,"mtime":1683790265898,"results":"37","hashOfConfig":"31"},{"size":282,"mtime":1683824931212,"results":"38","hashOfConfig":"31"},{"size":445,"mtime":1683790266492,"results":"39","hashOfConfig":"31"},{"size":880,"mtime":1683790266536,"results":"40","hashOfConfig":"31"},{"size":262,"mtime":1683790557839,"results":"41","hashOfConfig":"31"},{"size":1423,"mtime":1683790599816,"results":"42","hashOfConfig":"31"},{"size":453,"mtime":1683790266573,"results":"43","hashOfConfig":"31"},{"size":2121,"mtime":1683790266135,"results":"44","hashOfConfig":"31"},{"size":3974,"mtime":1683790266247,"results":"45","hashOfConfig":"31"},{"size":13845,"mtime":1683790266203,"results":"46","hashOfConfig":"31"},{"size":5266,"mtime":1683790266059,"results":"47","hashOfConfig":"31"},{"size":2082,"mtime":1683790266300,"results":"48","hashOfConfig":"31"},{"size":146,"mtime":1683790266328,"results":"49","hashOfConfig":"31"},{"size":12903,"mtime":1683790266412,"results":"50","hashOfConfig":"31"},{"size":514,"mtime":1683790265919,"results":"51","hashOfConfig":"31"},{"size":1819,"mtime":1683790266167,"results":"52","hashOfConfig":"31"},{"size":1436,"mtime":1683790266227,"results":"53","hashOfConfig":"31"},{"size":2219,"mtime":1683790266119,"results":"54","hashOfConfig":"31"},{"size":3279,"mtime":1683790266282,"results":"55","hashOfConfig":"31"},{"size":373,"mtime":1683790266468,"results":"56","hashOfConfig":"31"},{"size":731,"mtime":1683790266641,"results":"57","hashOfConfig":"31"},{"size":1537,"mtime":1683790266396,"results":"58","hashOfConfig":"31"},{"size":341,"mtime":1683790266609,"results":"59","hashOfConfig":"31"},{"filePath":"60","messages":"61","suppressedMessages":"62","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1op13ao",{"filePath":"63","messages":"64","suppressedMessages":"65","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","suppressedMessages":"68","errorCount":0,"fatalErrorCount":0,"warningCount":51,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69"},{"filePath":"70","messages":"71","suppressedMessages":"72","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"73"},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"83","messages":"84","suppressedMessages":"85","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"86"},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90"},{"filePath":"91","messages":"92","suppressedMessages":"93","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94"},{"filePath":"95","messages":"96","suppressedMessages":"97","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","suppressedMessages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"101","messages":"102","suppressedMessages":"103","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","suppressedMessages":"106","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"107","messages":"108","suppressedMessages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","suppressedMessages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113"},{"filePath":"114","messages":"115","suppressedMessages":"116","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117"},{"filePath":"118","messages":"119","suppressedMessages":"120","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","suppressedMessages":"123","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"124","messages":"125","suppressedMessages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"127"},{"filePath":"128","messages":"129","suppressedMessages":"130","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"131","messages":"132","suppressedMessages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"134","messages":"135","suppressedMessages":"136","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"137"},{"filePath":"138","messages":"139","suppressedMessages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"141","messages":"142","suppressedMessages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"144","messages":"145","suppressedMessages":"146","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"147","messages":"148","suppressedMessages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"150","messages":"151","suppressedMessages":"152","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"153","messages":"154","suppressedMessages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\Issue_Tracker\\frontend\\src\\index.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\reportWebVitals.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\App.js",["156","157","158","159","160","161","162","163","164","165","166","167","168","169","170","171","172","173","174","175","176","177","178","179","180","181","182","183","184","185","186","187","188","189","190","191","192","193","194","195","196","197","198","199","200","201","202","203","204","205","206"],[],"\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Aside from './components/aside/Aside';\nimport Main from './components/main/Main';\nimport IconButton from './reusable/buttons/IconButton/IconButton';\n\nfunction App() {\n  // --- 📅 Dates 📅 ---\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const months_short = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  function getDay() {\n    return days[new Date().getDay()];\n  }\n  function getDate() {\n    return new Date().getDate();\n  }\n  function getMonth() {\n    return months[new Date().getMonth()];\n  }\n  function getMonth_Short() {\n    return months_short[new Date().getMonth()];\n  }\n  function getYear() {\n    return new Date().getFullYear();\n  }\n  function getFullDate() {\n    const day = getDay();\n    const date = getDate();\n    const month = getMonth();\n    const year = getYear();\n    return `${day} ${date} ${month}, ${year}`;\n  }\n\n  function getShortDate() {\n    const date = getDate();\n    const month = getMonth_Short();\n    const year = getYear();\n    return `${date} ${month}, ${year}`;\n  }\n\n  // --- ⏰ Times ⏰ ---\n  function getCurrentTime() {\n    let hours = new Date().getHours();\n    let minutes = new Date().getMinutes();\n\n    if (hours < 10) {\n      hours = `${0}${hours}`;\n    }\n\n    if (minutes < 10) {\n      minutes = `${0}${minutes}`;\n    }\n\n    return `${hours}:${minutes}`;\n  }\n\n  // --- Aside ---\n  const [asideIsOpen, setAsideIsOpen] = useState(true);\n  // Toggle Aside\n  function toggleAside() {\n    setAsideIsOpen(!asideIsOpen);\n  }\n  // Open Aside\n  function openAside() {\n    setAsideIsOpen(true);\n  }\n\n\n  // --- PAGES ---\n  const [dashboardIsOpen, setDashboardIsOpen] = useState(true);\n  const [projectsIsOpen, setProjectsIsOpen] = useState(false);\n  const [reportsIsOpen, setReportsIsOpen] = useState(false);\n  const [messagesIsOpen, setMessagesIsOpen] = useState(false);\n  const [settingsIsOpen, setSettingsIsOpen] = useState(false);\n\n  const [projectPageIsOpen, setProjectPageIsOpen] = useState(false);\n  const [taskPageIsOpen, setTaskPageIsOpen] = useState(false);\n\n  // Aside Button Clicked:\n  function asideButtonClicked(title) {\n    if (title === 'Dashboard') {\n      openDashboard();\n    } else if (title === 'Projects') {\n      openProjects();\n    } else if (title === 'Reports') {\n      openReports();\n    } else if (title === 'Messages') {\n      openMessages();\n    } else if (title === 'Settings') {\n      openSettings();\n    }\n  }\n\n  // Aside Function (depending on button clicked):\n  function openDashboard() {\n    console.log('Dashboard Opened!')\n    updateCurrentPageName('Dashboard');\n\n    setDashboardIsOpen(true);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openProjects() {\n    console.log('Projects Opened!');\n    // setAsideIsOpen(true);\n    updateCurrentPageName('Projects');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(true);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openReports() {\n    console.log('Reports Opened!')\n    updateCurrentPageName('Reports');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(true);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openMessages() {\n    console.log('Messages Opened!')\n    updateCurrentPageName('Messages');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(true);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openSettings() {\n    console.log('Settings Opened!')\n    updateCurrentPageName('Settings');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(true);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n\n  // OPEN PROJECT\n  const [currentProjectId, setCurrentProjectId] = useState(null);\n\n  function openProjectPage(id) {\n    console.log('Project Page Opened!')\n    updateCurrentPageName('Project Page');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(true);\n    setTaskPageIsOpen(false);\n\n    userData.projects.map(project => {\n      if (project.id === id) {\n        // console.log('ID is ' + project);\n        console.log(project);\n        setCurrentProjectId(project.id);\n      }\n      console.log(`Opening Project ID ${id}`);\n    });\n  }\n\n  // OPEN TASK\n  function openTaskPage() {\n    console.log('Task Page Opened!')\n    updateCurrentPageName('Task Page');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(true);\n  }\n\n  function updateCurrentPageName(page) {\n    setCurrentPageName(page);\n  }\n  // ----- 🔨 EDITING PROJECT VALUES 🔨 -----\n  // Update Input Value:\n  function updateInputValue(e, target) {\n    target.title = e.target.value;\n    // console.log(target);\n    updateAll();\n  }\n\n\n  // --- USER DETAILS ---\n  const [currentPageName, setCurrentPageName] = useState('Dashboard');\n  // const [username, setUsername] = useState('Admin');\n  const [userData, setUserData] = useState(\n    {\n      \"username\": \"Admin\",\n      \"projects\": [\n        // --- START OF PROJECTS ---\n        {\n          \"id\": 1,\n          \"title\": \"Getting Started\",\n          \"author\": \"Botty Bot\",\n          \"timeCreated\": getCurrentTime(),\n          \"dateCreated\": getFullDate(),\n          \"tasks\": {\n            \"toDo\": [\n              {\n                \"id\": 1,\n                \"title\": \"Create Your Own Project!\",\n                \"author\": \"Botty Bot\",\n                \"content\": \"Use ByeBug to plan and organise your own projects.\",\n                \"tag\": \"Setup\",\n                \"timeCreated\": getCurrentTime(),\n                \"dateCreated\": getFullDate(),\n                \"dateCreatedShort\": getShortDate(),\n                \"comments\": [\n                  {\n                    \"id\": 1,\n                    \"author\": \"Botty Bot\",\n                    \"content\": \"You can create your own project by navigating to the 'Projects' page and pressing the 'Create Project' button!\",\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  },\n                  {\n                    \"id\": 2,\n                    \"author\": \"Botty Bot\",\n                    \"content\": \"You can change the status of your current task by pressing the icon next to 'Status'.\",\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  },\n                ],\n                \"isDeleted\": false,\n              },\n            ],\n            \"inProgress\": [],\n            \"complete\": [],\n          },\n          \"isDeleted\": false,\n          \"isComplete\": false,\n        }\n      ],\n      \"reports\": [\n      ],\n      \"messages\": [\n        {\n          \"id\": 1,\n          \"title\": \"Welcome to ByeBug!\",\n          \"content\": `Hello! Welcome to ByeBug - the place to break down your projects into smaller, manageable tasks! Navigate to the 'Projects' page and get started right away! We hope you have a pleasant experience organising your work!`,\n          \"author\": \"Botty Bot\",\n          \"timeCreated\": getCurrentTime(),\n          \"dateCreated\": getFullDate(),\n          \"isRead\": false,\n          \"isDeleted\": false\n        },\n      ]\n    }\n  )\n\n  // Change Message isRead to true:\n  function updateMessageIsRead(id) {\n    userData.messages.filter(message => {\n      if (message.id === id) {\n        message.isRead = true;\n        console.log(message);\n        updateAll();\n      }\n    })\n  }\n\n  // Change Report isRead to true:\n  function updateReportIsRead(id) {\n    userData.reports.filter(report => {\n      if (report.id === id) {\n        report.isRead = true;\n        console.log(report);\n        updateAll();\n      }\n    })\n  }\n\n  // *Function to re-render userData once updated:\n  function updateAll() {\n    setUserData({ ...userData });\n  }\n\n  // Create New Message Function (currently inactive)\n  function createNewMessage(title, author, timeCreated, dateCreated, content, isRead, isDeleted) {\n    userData.messages.push(\n      {\n        \"id\": userData.messages.length + 1,\n        \"title\": \"New One\",\n        \"author\": \"Botty Bot\",\n        \"timeCreated\": '18:30',\n        \"dateCreated\": 'Tuesday 13 August, 2022',\n        \"content\": \"Hello, this is some example message content just to check out how it looks once it is rendered in the broswer. Thanks!\",\n        \"isRead\": false,\n        \"isDeleted\": false\n      }\n    )\n    updateAll();\n    console.log(userData.messages);\n  }\n\n  // Create New Report Function (current inactive)\n  function createNewReport(title, content, timeCreated, dateCreated, reportType, isRead, isDeleted) {\n    userData.reports.push(\n      {\n        \"id\": userData.reports.length + 1,\n        \"title\": title,\n        \"content\": content,\n        \"timeCreated\": timeCreated,\n        \"dateCreated\": dateCreated,\n        \"reportType\": reportType,\n        \"isRead\": isRead,\n        \"isDeleted\": isDeleted\n      }\n    )\n    updateAll();\n    console.log(userData.reports);\n  }\n\n  // Create New Project\n  function createNewProject(projectName) {\n    userData.projects.push(\n      {\n        \"id\": userData.projects.length + 1,\n        \"title\": projectName,\n        \"author\": userData.username,\n        \"timeCreated\": getCurrentTime(),\n        \"dateCreated\": getFullDate(),\n        \"tasks\": {\n          \"toDo\": [],\n          \"inProgress\": [],\n          \"complete\": []\n        },\n        \"isDeleted\": false,\n        \"isComplete\": false\n      },\n    )\n    updateAll();\n    openProjectPage(userData.projects.length);\n    console.log(userData.projects);\n  }\n\n  // Create New Project Task:\n  function createNewTask(projectId, taskType) {\n    // console.log(`This is a '${taskType}' for project ID ${projectId}`);\n    userData.projects.filter(project => {\n      if (project.id === projectId) {\n        if (taskType === 'To Do') {\n          project.tasks.toDo.push({\n            \"id\": project.tasks.toDo.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          })\n          openTaskPage(project.tasks.toDo.length, 'To Do', projectId);\n        } else if (taskType === 'In Progress') {\n          project.tasks.inProgress.push({\n            \"id\": project.tasks.inProgress.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.inProgress.length, 'In Progress', projectId);\n        } else if (taskType === 'Complete') {\n          project.tasks.complete.push({\n            \"id\": project.tasks.complete.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.complete.length, 'Complete', projectId);\n        }\n        updateAll();\n      }\n    })\n  }\n\n  // Open Project Task Page\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTaskType, setCurrentTaskType] = useState(null);\n\n  function openTaskPage(taskId, taskType, currentProjectId) {\n    // console.log(`This is task ${taskId} of the ${taskType} category for project ${currentProjectId}`);\n    setCurrentPageName('Task Page');\n    setCurrentTaskId(taskId);\n    setCurrentTaskType(taskType);\n    setCurrentProjectId(currentProjectId);\n    // Need to pass these 3 values into Main.js and into TaskPage.js\n  }\n\n  // Back Button from TaskPage to Project Page ---\n  function updateCurrentProject(id) {\n    setCurrentProjectId(id);\n  }\n  function taskBackButtonClicked() {\n    openProjectPage(currentProjectId);\n  }\n  // ---\n\n\n  // UPDATE INPUT VALUES OF TASK PAGE\n  function updateTaskTitleValue(e, target) {\n    // console.log(e.target.value)\n    // console.log(target.title)\n    target.title = e.target.value;\n    updateAll();\n  }\n  function updateTaskTagValue(e, target) {\n    target.tag = e.target.value;\n    updateAll();\n  }\n  function updateTaskContentValue(e, target) {\n    target.content = e.target.value;\n    updateAll();\n  }\n\n  // Toggle Priority Button (Comment)\n  function togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                  console.log(comment.isPriority)\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                }\n              })\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n  }\n\n  // Toggle Like Button (Comment)\n  function toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              })\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n  }\n\n\n  // Delete Button (Comment)\n  function deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              })\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n  }\n\n  // Create New Comment\n  const [commentInputValue, setCommentInputValue] = useState('');\n  function updateCommentInputValue(e) {\n    setCommentInputValue(e.target.value);\n    updateAll();\n  }\n  function createNewComment(currentProjectId, currentTaskId, currentTaskType) {\n    if (commentInputValue !== '') {\n      userData.projects.filter(project => {\n        if (project.id === currentProjectId) {\n          if (currentTaskType === 'To Do') {\n            // console.log(project.tasks.toDo);\n            project.tasks.toDo.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push(\n                  {\n                    \"id\": task.comments.length + 1,\n                    \"author\": userData.username,\n                    \"content\": commentInputValue,\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  }\n                );\n              }\n            })\n          } else if (currentTaskType === 'In Progress') {\n            // console.log(project.tasks.inProgress);\n            project.tasks.inProgress.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push(\n                  {\n                    \"id\": task.comments.length + 1,\n                    \"author\": userData.username,\n                    \"content\": commentInputValue,\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  }\n                );\n              }\n            })\n          } else if (currentTaskType === 'Complete') {\n            // console.log(project.tasks.complete);\n            project.tasks.complete.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push(\n                  {\n                    \"id\": task.comments.length + 1,\n                    \"author\": userData.username,\n                    \"content\": commentInputValue,\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  }\n                );\n              }\n            })\n          }\n        }\n      })\n      setCommentInputValue('');\n      updateAll();\n    }\n  }\n\n  function deleteProjectButton(currentProjectId) {\n    // console.log(currentProjectId)\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        project.isDeleted = true;\n        // console.log(project);\n        createNewReport(\n          'Project Deleted',\n          `'${project.title}' was deleted by ${userData.username}.`,\n          getCurrentTime(),\n          getFullDate(),\n          'Warning',\n          false,\n          false\n        )\n      }\n    })\n    updateAll();\n    setCurrentPageName('Projects');\n  }\n\n  function deleteTaskButton(currentProjectId, currentTaskId, currentTaskType) {\n    // console.log('Task deleted')\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        // console.log(project)\n        if (currentTaskType === 'To Do') {\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true;\n              // console.log(task)\n              createNewReport(\n                'Task Deleted',\n                `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'To Do' category at the time of deletion.`,\n                getCurrentTime(),\n                getFullDate(),\n                'Warning',\n                false,\n                false\n              )\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true;\n              // console.log(task)\n              createNewReport(\n                'Task Deleted',\n                `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'In Progress' category at the time of deletion.`,\n                getCurrentTime(),\n                getFullDate(),\n                'Warning',\n                false,\n                false\n              )\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true;\n              // console.log(task)\n              createNewReport(\n                'Task Deleted',\n                `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'Complete' category at the time of deletion.`,\n                getCurrentTime(),\n                getFullDate(),\n                'Warning',\n                false,\n                false\n              )\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n    setCurrentPageName('Project Page');\n  }\n\n  // Change Task Status\n  function changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId) {\n    // console.log(changeToStatus);\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        // console.log(project);\n        if (currentTaskType === 'To Do') {\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task };\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n              task.isDeleted = true;\n              // console.log(project);\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task };\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n              task.isDeleted = true;\n              // console.log(task);\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task };\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n              task.isDeleted = true;\n              // console.log(task);\n            }\n          });\n        }\n      }\n    })\n    setCurrentProjectId(currentProjectId);\n    updateAll();\n  }\n\n  function deleteMessage(id) {\n    // console.log(`Message ${id} is deleted`);\n    userData.messages.filter(message => {\n      if (message.id === id) {\n        message.isDeleted = true;\n      }\n    });\n    updateAll();\n  }\n\n  function deleteReport(id) {\n    // console.log(`Report ${id} is deleted`);\n    userData.reports.filter(report => {\n      if (report.id === id) {\n        report.isDeleted = true;\n      }\n    });\n    updateAll();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className={asideIsOpen ? 'aside-container' : 'aside-container aside-container-disabled'}>\n          <IconButton\n            iconClass={`aside-container__button ${asideIsOpen ? 'fa-solid fa-angles-left' : 'fa-solid fa-angles-right'}`}\n            handleClick={() => toggleAside()}\n          />\n          <Aside\n            asideIsOpen={asideIsOpen}\n            handleClick={(title) => asideButtonClicked(title)}\n            updateCurrentPageName={() => updateCurrentPageName('Projects')}\n            userData={userData}\n            createNewProject={(projectName) => createNewProject(projectName)}\n            openProjectPage={(id) => openProjectPage(id)}\n          />\n        </div>\n        <div className=\"main-container\">\n          <Main\n            currentPageName={currentPageName}\n            updateCurrentPageName={(page) => updateCurrentPageName(page)}\n            getYear={() => getYear()}\n            userData={userData}\n            updateMessageIsRead={(id) => updateMessageIsRead(id)}\n            updateReportIsRead={(id) => updateReportIsRead(id)}\n            createNewProject={(projectName) => createNewProject(projectName)}\n            openProjectPage={(id) => openProjectPage(id)}\n            currentProjectId={currentProjectId}\n            openProjects={() => openProjects()}\n            updateInputValue={(e, target) => updateInputValue(e, target)}\n            asideIsOpen={asideIsOpen}\n            createNewTask={(projectId, taskType) => createNewTask(projectId, taskType)}\n            openTaskPage={(taskId, taskType, currentProjectId) => openTaskPage(taskId, taskType, currentProjectId)}\n            currentTaskId={currentTaskId}\n            currentTaskType={currentTaskType}\n            updateCurrentProject={(id) => updateCurrentProject(id)}\n            taskBackButtonClicked={() => taskBackButtonClicked()}\n            updateTaskTitleValue={(e, target) => updateTaskTitleValue(e, target)}\n            updateTaskTagValue={(e, target) => updateTaskTagValue(e, target)}\n            updateTaskContentValue={(e, target) => updateTaskContentValue(e, target)}\n            togglePriorityButton={(currentProjectId, currentTaskType, currentTaskId, id) => togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id)}\n            toggleLikeButton={(currentProjectId, currentTaskType, currentTaskId, id) => toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id)}\n            deleteCommentButton={(currentProjectId, currentTaskType, currentTaskId, id) => deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id)}\n            createNewComment={(currentProjectId, currentTaskId, currentTaskType) => createNewComment(currentProjectId, currentTaskId, currentTaskType)}\n            updateCommentInputValue={(e) => updateCommentInputValue(e)}\n            commentInputValue={commentInputValue}\n            deleteProjectButton={(currentProjectId) => deleteProjectButton(currentProjectId)}\n            deleteTaskButton={(currentProjectId, currentTaskId, currentTaskType) => deleteTaskButton(currentProjectId, currentTaskId, currentTaskType)}\n            changeTaskStatus={(changeToStatus, currentProjectId, currentTaskType, currentTaskId) => changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId)}\n            openReports={() => openReports()}\n            openMessages={() => openMessages()}\n            deleteMessage={(id) => deleteMessage(id)}\n            deleteReport={(id) => deleteReport(id)}\n          />\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\Aside.js",["207","208"],[],"\nimport './Aside.css';\nimport Logo from './Logo';\nimport FixedButton from '../../reusable/buttons/FixedButton/FixedButton';\nimport NotifyButton from '../../reusable/buttons/NotifyButton/NotifyButton';\nimport Dropdown from './Dropdown';\n\nfunction Aside({ asideIsOpen, handleClick, dropdownContentIsShown, updateCurrentPageName, userData, createNewProject, openProjectPage }) {\n    // Calculate Unread Notifications\n    let read_reportNotifications = userData.reports ? userData.reports.filter(report => report.isRead === true) : 0;\n    let unread_reportNotifications = userData.reports ? userData.reports.filter(report => report.isRead === false) : 0;\n    let read_messageNotifications = userData.messages ? userData.messages.filter(message => message.isRead === true) : 0;\n    let unread_messageNotifications = userData.messages ? userData.messages.filter(message => message.isRead === false) : 0;\n\n    return (\n        <aside className=\"aside\">\n            {/* Logo */}\n            <Logo\n                asideIsShown={asideIsOpen}\n            />\n            {/* Button Container */}\n            <div className=\"aside__button-container\">\n                <div className=\"aside__button-container--top\">\n                    <FixedButton\n                        icon=\"fa-solid fa-shapes\"\n                        title=\"Dashboard\"\n                        textIsShown={asideIsOpen}\n                        handleClick={handleClick}\n                    />\n                    {asideIsOpen && <Dropdown\n                        icon=\"fa-solid fa-bolt\"\n                        title=\"Projects\"\n                        textIsShown={asideIsOpen}\n                        updateCurrentPageName={updateCurrentPageName}\n                        createNewProject={createNewProject}\n                        userData={userData}\n                        openProjectPage={openProjectPage}\n                    />}\n                    {!asideIsOpen && <FixedButton\n                        icon=\"fa-solid fa-bolt\"\n                        title=\"Projects\"\n                        textIsShown={asideIsOpen}\n                        handleClick={handleClick}\n                    />}\n                    <NotifyButton\n                        icon=\"fa-solid fa-bug\"\n                        title=\"Reports\"\n                        notificationCount={unread_reportNotifications.length}\n                        textIsShown={asideIsOpen}\n                        handleClick={handleClick}\n                    />\n                    <NotifyButton\n                        icon=\"fa-solid fa-envelope\"\n                        title=\"Messages\"\n                        notificationCount={unread_messageNotifications.length}\n                        textIsShown={asideIsOpen}\n                        handleClick={handleClick}\n                    />\n                </div>\n                <div className=\"aside__button-container--bottom\">\n                    <FixedButton\n                        icon=\"fa-solid fa-gear\"\n                        title=\"Settings\"\n                        textIsShown={asideIsOpen}\n                        handleClick={handleClick}\n                    />\n                    <FixedButton\n                        icon=\"fa-solid fa-arrow-right-from-bracket\"\n                        title=\"Logout\"\n                        textIsShown={asideIsOpen}\n                        handleClick={handleClick}\n                    />\n                </div>\n            </div>\n        </aside >\n    )\n}\n\nexport default Aside;","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\Main.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\IconButton\\IconButton.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\Dropdown.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\Logo.js",["209"],[],"\nimport './Logo.css';\nimport Pic from \"../../assets/taskr-logo-small.png\";\n\nfunction Logo({ asideIsShown }) {\n    return (\n        <div className=\"aside__logo\">\n            {asideIsShown && <p className=\"logo-container__text\">ByeBug</p>}\n        </div>\n    )\n}\n\nexport default Logo;","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\FixedButton\\FixedButton.js",["210"],[],"\nimport './FixedButton.css';\n\nfunction FixedButton({ icon, title, textIsShown, handleClick }) {\n    function buttonClicked() {\n        console.log(`${title} clicked!`);\n    }\n\n    return (\n        <button onClick={() => handleClick(title)} className=\"fixed-btn btn-transparent\">\n            <i className={icon}></i>\n            {textIsShown && <h3 className=\"fixed-btn__title\">{title}</h3>}\n        </button>\n    )\n}\n\nexport default FixedButton;","D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\NotifyButton\\NotifyButton.js",["211","212"],[],"\nimport { useDeferredValue } from 'react';\nimport './NotifyButton.css';\n\nfunction NotifyButton({ icon, title, notificationCount, textIsShown, handleClick }) {\n    function buttonClicked() {\n        console.log(`${title} clicked! (${notificationCount})`);\n    }\n\n    return (\n        <button onClick={() => handleClick(title)} className=\"notify-btn btn-transparent\">\n            <i className={`notify-btn__icon ${icon}`}></i>\n            {textIsShown && <h3 className=\"notify-btn__title\">{title}</h3>}\n            {textIsShown && notificationCount !== 0 && <div className=\"notify-btn__notification-bubble\">{notificationCount}</div>}\n            {!textIsShown && notificationCount !== 0 && <div className=\"notify-btn__notification-bubble--small\">\n                <i className=\"fa-solid fa-exclamation\"></i>\n            </div>}\n        </button>\n    )\n}\n\nexport default NotifyButton;","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\MainFooter\\MainFooter.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\MainNav\\MainNav.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\headers\\MainPageHeader\\MainPageHeader.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Messages\\Messages.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\Projects.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\ProjectPage\\ProjectPage.js",["213","214"],[],"\nimport { useState, useEffect } from 'react';\nimport EmptyNotification from '../../../../../reusable/notifications/EmptyNotification/EmptyNotification';\nimport Projects from '../Projects';\nimport './ProjectPage.css';\nimport ProjectTask from './ProjectTask';\n\nfunction ProjectPage({ userData, currentProjectId, project, updateInputValue, asideIsOpen, createNewTask, openTaskPage, deleteProjectButton }) {\n    function openTaskPageClicked(taskId, taskType) {\n        openTaskPage(taskId, taskType, currentProjectId);\n    }\n\n    const [deleteButtonIsOpen, setDeleteButtonIsOpen] = useState(false);\n    function deleteProjectButtonClicked(currentProjectId) {\n        setDeleteButtonIsOpen(true);\n        setTimeout(() => {\n            setDeleteButtonIsOpen(false);\n        }, 3000);\n    }\n\n    function closeDeleteOptions() {\n        setDeleteButtonIsOpen(false);\n    }\n\n    function deleteProjectCheckButton(currentProjectId) {\n        setDeleteButtonIsOpen(false);\n        deleteProjectButton(currentProjectId);\n    }\n\n    return (\n        <div className=\"project-page\">\n            {/* Project Title Information */}\n            <div className=\"main__head\">\n                <div className=\"main__head-info\">\n                    <div className=\"main__head-info--top\">\n                        <input onChange={(e, target) => updateInputValue(e, project)} className=\"head-info__title\" value={project.title} placeholder=\"Add Project Name...\" type=\"text\" />\n                        {!deleteButtonIsOpen && <button onClick={() => deleteProjectButtonClicked(currentProjectId)} className=\"button--delete btn-transparent\">\n                            <i className=\"fa-solid fa-trash-can\"></i>\n                        </button>}\n                        {deleteButtonIsOpen && <div className=\"delete__options-container\">\n                            <div className=\"options-container__bar--outer\">\n                                <div className=\"options-container__bar--inner\"></div>\n                            </div>\n                            <button onClick={() => deleteProjectCheckButton(currentProjectId)} className=\"options-container__button btn-transparent\">\n                                <i className=\"options-container__button--delete fa-solid fa-check\"></i>\n                            </button>\n                            <button onClick={() => closeDeleteOptions()} className=\"options-container__button btn-transparent\">\n                                <i className=\"options-container__button--close fa-solid fa-xmark\"></i>\n                            </button>\n                        </div>}\n                    </div>\n                    <p className=\"head-info__date\">Created on {project.dateCreated} at {project.timeCreated}.</p>\n                </div>\n            </div>\n\n            {/* Project List Content */}\n            <div className={`main__content ${asideIsOpen ? 'main__content--large' : 'main__content--small'}`}>\n                <div className=\"main__list\">\n                    {/* List Header */}\n                    <div className=\"main__list-header\">\n                        <i className=\"main__list-header--icon fa-solid fa-layer-group color--primary\"></i>\n                        <div className=\"main__list-header--text\">\n                            <h3 className=\"list-header__title\">To Do</h3>\n                            <p className=\"list-header__subtitle\">{project.tasks.toDo.filter(task => task.isDeleted === false).length} {project.tasks.toDo.filter(task => task.isDeleted === false).length === 1 ? 'task' : 'tasks'} remaining</p>\n                        </div>\n                    </div>\n                    {/* List Button */}\n                    <button onClick={() => createNewTask(currentProjectId, 'To Do')} className=\"list__add-btn btn\">\n                        <i className=\"list__add-btn--icon fa-solid fa-circle-plus\"></i>\n                        <p className=\"list__add-btn--text\">Add Task</p>\n                    </button>\n                    {/* List */}\n                    <div className=\"list list--to-do\">\n                        {/* List Items */}\n                        {[...project.tasks.toDo.filter(task => task.isDeleted === false)].length === 0 && <EmptyNotification\n                            icon='fa-solid fa-box-open'\n                            text='Looks like this list is empty!'\n                        />}\n                        {/* {project.tasks.toDo.length === 0 && <EmptyNotification\n                            icon='fa-solid fa-box-open'\n                            text='Looks like this list is empty!'\n                        />} */}\n                        {[...project.tasks.toDo.filter(task => task.isDeleted === false)].map(task => {\n                            return <ProjectTask\n                                key={task.id}\n                                id={task.id}\n                                title={task.title}\n                                author={task.author}\n                                content={task.content}\n                                tag={task.tag}\n                                timeCreated={task.timeCreated}\n                                dateCreated={task.dateCreated}\n                                dateCreatedShort={task.dateCreatedShort}\n                                comments={task.comments}\n                                isDeleted={task.isDeleted}\n                                taskType='To Do'\n                                openTaskPageClicked={(taskId, taskType) => openTaskPageClicked(taskId, taskType)}\n                            />\n                        })}\n                        {/* {project.tasks.toDo.length > 0 && project.tasks.toDo.map(task => <ProjectTask\n                            key={task.id}\n                            id={task.id}\n                            title={task.title}\n                            author={task.author}\n                            content={task.content}\n                            tag={task.tag}\n                            timeCreated={task.timeCreated}\n                            dateCreated={task.dateCreated}\n                            dateCreatedShort={task.dateCreatedShort}\n                            comments={task.comments}\n                            isDeleted={task.isDeleted}\n                            taskType='To Do'\n                            openTaskPageClicked={(taskId, taskType) => openTaskPageClicked(taskId, taskType)}\n                        />)} */}\n\n                    </div>\n                </div>\n\n                <div className=\"main__list\">\n                    {/* List Header */}\n                    <div className=\"main__list-header\">\n                        <i className=\"main__list-header--icon fa-solid fa-trowel-bricks color--yellow\"></i>\n                        <div className=\"main__list-header--text\">\n                            <h3 className=\"list-header__title\">In Progress</h3>\n                            <p className=\"list-header__subtitle\">{project.tasks.inProgress.filter(task => task.isDeleted === false).length} {project.tasks.inProgress.filter(task => task.isDeleted === false).length === 1 ? 'task' : 'tasks'} remaining</p>\n                        </div>\n                    </div>\n                    {/* List Button */}\n                    <button onClick={() => createNewTask(currentProjectId, 'In Progress')} className=\"list__add-btn btn\">\n                        <i className=\"list__add-btn--icon fa-solid fa-circle-plus\"></i>\n                        <p className=\"list__add-btn--text\">Add Task</p>\n                    </button>\n                    {/* List */}\n                    <div className=\"list list--in-progress\">\n                        {/* List Items */}\n                        {[...project.tasks.inProgress.filter(task => task.isDeleted === false)].length === 0 && <EmptyNotification\n                            icon='fa-solid fa-box-open'\n                            text='Looks like this list is empty!'\n                        />}\n                        {/* {project.tasks.inProgress.length === 0 && <EmptyNotification\n                            icon='fa-solid fa-box-open'\n                            text='Looks like this list is empty!'\n                        />} */}\n                        {[...project.tasks.inProgress.filter(task => task.isDeleted === false)].map(task => {\n                            return <ProjectTask\n                                key={task.id}\n                                id={task.id}\n                                title={task.title}\n                                author={task.author}\n                                content={task.content}\n                                tag={task.tag}\n                                timeCreated={task.timeCreated}\n                                dateCreated={task.dateCreated}\n                                dateCreatedShort={task.dateCreatedShort}\n                                comments={task.comments}\n                                isDeleted={task.isDeleted}\n                                taskType='In Progress'\n                                openTaskPageClicked={(taskId, taskType) => openTaskPageClicked(taskId, taskType)}\n                            />\n                        })}\n                        {/* {project.tasks.inProgress.length > 0 && project.tasks.inProgress.map(task => <ProjectTask\n                            key={task.id}\n                            id={task.id}\n                            title={task.title}\n                            author={task.author}\n                            content={task.content}\n                            tag={task.tag}\n                            timeCreated={task.timeCreated}\n                            dateCreated={task.dateCreated}\n                            dateCreatedShort={task.dateCreatedShort}\n                            comments={task.comments}\n                            isDeleted={task.isDeleted}\n                            taskType='In Progress'\n                            openTaskPageClicked={(taskId, taskType) => openTaskPageClicked(taskId, taskType)}\n                        />)} */}\n\n                    </div>\n                </div>\n\n                <div className=\"main__list\">\n                    {/* List Header */}\n                    <div className=\"main__list-header\">\n                        <i className=\"main__list-header--icon fa-solid fa-fire color--green\"></i>\n                        <div className=\"main__list-header--text\">\n                            <h3 className=\"list-header__title\">Complete</h3>\n                            <p className=\"list-header__subtitle\">{project.tasks.complete.filter(task => task.isDeleted === false).length} {project.tasks.complete.filter(task => task.isDeleted === false).length === 1 ? 'task' : 'tasks'} remaining</p>\n                        </div>\n                    </div>\n                    {/* List Button */}\n                    <button onClick={() => createNewTask(currentProjectId, 'Complete')} className=\"list__add-btn btn\">\n                        <i className=\"list__add-btn--icon fa-solid fa-circle-plus\"></i>\n                        <p className=\"list__add-btn--text\">Add Task</p>\n                    </button>\n                    {/* List */}\n                    <div className=\"list list--complete\">\n                        {/* List Items */}\n                        {[...project.tasks.complete.filter(task => task.isDeleted === false)].length === 0 && <EmptyNotification\n                            icon='fa-solid fa-box-open'\n                            text='Looks like this list is empty!'\n                        />}\n                        {/* {project.tasks.complete.length === 0 && <EmptyNotification\n                            icon='fa-solid fa-box-open'\n                            text='Looks like this list is empty!'\n                        />} */}\n                        {[...project.tasks.complete.filter(task => task.isDeleted === false)].map(task => {\n                            return <ProjectTask\n                                key={task.id}\n                                id={task.id}\n                                title={task.title}\n                                author={task.author}\n                                content={task.content}\n                                tag={task.tag}\n                                timeCreated={task.timeCreated}\n                                dateCreated={task.dateCreated}\n                                dateCreatedShort={task.dateCreatedShort}\n                                comments={task.comments}\n                                isDeleted={task.isDeleted}\n                                taskType='Complete'\n                                openTaskPageClicked={(taskId, taskType) => openTaskPageClicked(taskId, taskType)}\n                            />\n                        })}\n                        {/* {project.tasks.complete.length > 0 && project.tasks.complete.map(task => <ProjectTask\n                            key={task.id}\n                            id={task.id}\n                            title={task.title}\n                            author={task.author}\n                            content={task.content}\n                            tag={task.tag}\n                            timeCreated={task.timeCreated}\n                            dateCreated={task.dateCreated}\n                            dateCreatedShort={task.dateCreatedShort}\n                            comments={task.comments}\n                            isDeleted={task.isDeleted}\n                            taskType='Complete'\n                            openTaskPageClicked={(taskId, taskType) => openTaskPageClicked(taskId, taskType)}\n                        />)} */}\n\n                    </div>\n                </div>\n            </div>\n\n\n\n        </div >\n    )\n}\n\nexport default ProjectPage;","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Dashboard\\Dashboard.js",["215","216"],[],"\nimport { userState, useEffect, useState } from 'react';\nimport './Dashboard.css';\n\nfunction Dashboard({ userData, openProjects, openReports, openMessages }) {\n    // console.log(userData)\n    const [totalToDos, setTotalToDos] = useState(0);\n    const [totalInProgress, setTotalInProgress] = useState(0);\n    const [totalComplete, setTotalComplete] = useState(0);\n\n    useEffect(() => {\n        let toDos = 0;\n        let inProgress = 0;\n        let complete = 0;\n        userData.projects.filter(project => project.isDeleted === false).forEach(project => {\n            // console.log(project.title)\n            toDos += project.tasks.toDo.filter(task => task.isDeleted === false).length;\n            inProgress += project.tasks.inProgress.filter(task => task.isDeleted === false).length;\n            complete += project.tasks.complete.filter(task => task.isDeleted === false).length;\n            setTotalToDos(toDos);\n            setTotalInProgress(inProgress);\n            setTotalComplete(complete);\n        });\n    }, []);\n\n    return (\n        <div className=\"dashboard\">\n            {/* Welcome Message */}\n            <div className=\"dashboard__name\">\n                <p className=\"dashboard__name--text\">Welcome, <strong>{userData.username}</strong>!</p>\n            </div>\n            {/* Dashboard Grid */}\n            <div className=\"dashboard__grid\">\n                <button onClick={() => openProjects()} className=\"grid-button grid-button--large btn-transparent\">\n                    <i className=\"grid-button__background-icon--large fa-solid fa-bolt\"></i>\n                    <h2 className=\"grid-button__title\">Projects</h2>\n                    <div className=\"grid-button__info-container\">\n                        <div className=\"grid-button__icon-container\">\n                            <i className=\"grid-button__icon fa-solid fa-bolt\"></i>\n                        </div>\n                        <p className=\"grid-button__text\">You've got <strong>{userData.projects.filter(project => project.isDeleted === false).length} {userData.projects.filter(project => project.isDeleted === false).length === 1 ? 'project' : 'projects'}</strong>.</p>\n                    </div>\n                    <div className=\"grid-button__info-container\">\n                        <div className=\"grid-button__icon-container\">\n                            <i className=\"grid-button__icon fa-solid fa-layer-group\"></i>\n                        </div>\n                        <p className=\"grid-button__text\">You've got <strong>{totalToDos} {totalToDos === 1 ? 'task' : 'tasks'} to do</strong>.</p>\n                    </div>\n                    <div className=\"grid-button__info-container\">\n                        <div className=\"grid-button__icon-container\">\n                            <i className=\"grid-button__icon fa-solid fa-trowel-bricks\"></i>\n                        </div>\n                        <p className=\"grid-button__text\">You've got <strong>{totalInProgress} {totalInProgress === 1 ? 'task' : 'tasks'} in progress</strong>.</p>\n                    </div>\n                    <div className=\"grid-button__info-container\">\n                        <div className=\"grid-button__icon-container\">\n                            <i className=\"grid-button__icon fa-solid fa-fire\"></i>\n                        </div>\n                        <p className=\"grid-button__text\">You've <strong>complete {totalComplete} {totalComplete === 1 ? 'task' : 'tasks'}</strong>.</p>\n                    </div>\n                </button>\n                <button onClick={() => openReports()} className=\"grid-button grid-button--small btn-transparent\">\n                    <i className=\"grid-button__background-icon fa-solid fa-bug\"></i>\n                    <h2 className=\"grid-button__title\">Reports</h2>\n                    <div className=\"grid-button__info-container\">\n                        <div className=\"grid-button__icon-container\">\n                            <i className=\"grid-button__icon fa-solid fa-bug\"></i>\n                        </div>\n                        <p className=\"grid-button__text\">You've got <strong>{userData.reports.filter(report => report.isRead === false).length} new {userData.reports.filter(report => report.isRead === false).length === 1 ? 'report' : 'reports'}</strong>.</p>\n                    </div>\n                </button>\n                <button onClick={() => openMessages()} className=\"grid-button grid-button--small btn-transparent\">\n                    <i className=\"grid-button__background-icon fa-solid fa-envelope\"></i>\n                    <h2 className=\"grid-button__title\">Messages</h2>\n                    <div className=\"grid-button__info-container\">\n                        <div className=\"grid-button__icon-container\">\n                            <i className=\"grid-button__icon fa-solid fa-envelope\"></i>\n                        </div>\n                        <p className=\"grid-button__text\">You've got <strong>{userData.messages.filter(message => message.isRead === false).length} new {userData.messages.filter(message => message.isRead === false).length === 1 ? 'message' : 'messages'}</strong>.</p>\n                    </div>\n                </button>\n            </div>\n        </div >\n    )\n}\n\nexport default Dashboard;","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Reports\\Reports.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Settings\\Settings.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Task\\TaskPage.js",["217","218","219","220","221","222","223"],[],"\nimport { useState, useEffect } from 'react';\nimport EmptyNotification from '../../../../reusable/notifications/EmptyNotification/EmptyNotification';\nimport TaskComment from './TaskComment';\nimport './TaskPage.css';\nimport ButtonStrong from '../../../../reusable/buttons/ButtonStrong/ButtonStrong';\nimport { toHaveAccessibleDescription } from '@testing-library/jest-dom/dist/matchers';\n\nfunction TaskPage({ userData, currentProjectId, currentTaskId, currentTaskType, updateCurrentProject, updateTaskTitleValue, updateTaskTagValue, updateTaskContentValue, togglePriorityButton, toggleLikeButton, deleteCommentButton, createNewComment, updateCommentInputValue, commentInputValue, deleteTaskButton, changeTaskStatus }) {\n    console.log(userData)\n    console.log(`This is Task ${currentTaskId} of the ${currentTaskType} category of project number ${currentProjectId}`);\n\n    let typeStyling;\n    if (currentTaskType === 'To Do') {\n        typeStyling = 'ticket-container--primary';\n    } else if (currentTaskType === 'In Progress') {\n        typeStyling = 'ticket-container--yellow';\n    } else if (currentTaskType === 'Complete') {\n        typeStyling = 'ticket-container--green';\n    }\n\n    const [currentProject, setCurrentProject] = useState('Title');\n    const [currentTask, setCurrentTask] = useState({ \"title\": \"Task\", \"comments\": [] });\n    useEffect(() => {\n        userData.projects.filter(project => {\n            if (project.id === currentProjectId) {\n                setCurrentProject(project);\n                updateCurrentProject(currentProjectId);\n                console.log(project);\n                if (currentTaskType === 'To Do') {\n                    project.tasks.toDo.filter(task => {\n                        if (task.id === currentTaskId) {\n                            console.log(task);\n                            setCurrentTask(task);\n                        }\n                    })\n                } else if (currentTaskType === 'In Progress') {\n                    project.tasks.inProgress.filter(task => {\n                        if (task.id === currentTaskId) {\n                            console.log(task);\n                            setCurrentTask(task);\n                        }\n                    })\n                } else if (currentTaskType === 'Complete') {\n                    project.tasks.complete.filter(task => {\n                        if (task.id === currentTaskId) {\n                            console.log(task);\n                            setCurrentTask(task);\n                        }\n                    })\n                }\n            }\n        });\n    }, []);\n\n    function handleTaskTitleChange(e) {\n        updateTaskTitleValue(e, currentTask);\n    }\n\n    function handleTaskTagChange(e) {\n        updateTaskTagValue(e, currentTask);\n    }\n\n    function handleTaskContentChange(e) {\n        updateTaskContentValue(e, currentTask);\n    }\n\n    // Toggle Priority Button (Comment)\n    function togglePriorityButtonClicked(id) {\n        togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id);\n    }\n\n    // Toggle Like Button (Comment)\n    function toggleLikeButtonClicked(id) {\n        toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id);\n    }\n\n    // Delete Button (Comment)\n    function deleteCommentButtonClicked(id) {\n        deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id);\n    }\n\n    // Create New Comment Button Clicked\n    function createNewCommentClicked(e) {\n        e.preventDefault();\n        createNewComment(currentProjectId, currentTaskId, currentTaskType)\n    }\n\n    // Delete Task\n    const [deleteButtonIsOpen, setDeleteButtonIsOpen] = useState(false);\n    function deleteTaskButtonClicked(currentProjectId, currentTaskId, currentTaskType) {\n        setDeleteButtonIsOpen(true);\n        setTimeout(() => {\n            setDeleteButtonIsOpen(false);\n        }, 3000);\n    }\n\n    function closeDeleteOptions() {\n        setDeleteButtonIsOpen(false);\n    }\n\n    function deleteTaskCheckButton(currentProjectId, currentTaskId, currentTaskType) {\n        setDeleteButtonIsOpen(false);\n        deleteTaskButton(currentProjectId, currentTaskId, currentTaskType);\n    }\n\n    // Show Status Buttons\n    const [statusButtonsShown, setStatusButtonsShown] = useState(false);\n    function openStatusButtonsClicked() {\n        setStatusButtonsShown(true);\n    }\n    function changeStatusButtonClicked(changeToStatus) {\n        // console.log(changeToStatus);\n        changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId);\n        setStatusButtonsShown(false);\n    }\n\n    return (\n        <div className={`ticket-container ${typeStyling}`}>\n            {/* Ticket Title Information */}\n            < div className=\"ticket__head\" >\n                <div className=\"ticket__head-info\">\n                    {/* Header */}\n                    <div className=\"ticket-info__info\">\n                        <i className=\"ticket-info__icon fa-solid fa-ticket\"></i>\n                        <p className=\"ticket-info__subtitle\">Opened a task for <strong className=\"ticket-info__text--strong\">{currentProject.title}</strong>.</p>\n                    </div>\n                    <div className=\"main__head-info--top\">\n                        <input onChange={(e) => handleTaskTitleChange(e)} className=\"ticket-info__title\" value={currentTask.title} placeholder=\"Add Ticket Name...\" type=\"text\" />\n                        {!deleteButtonIsOpen && <button onClick={() => deleteTaskButtonClicked(currentProjectId, currentTaskId, currentTaskType)} className=\"button--delete btn-transparent\">\n                            <i className=\"fa-solid fa-trash-can\"></i>\n                        </button>}\n                        {deleteButtonIsOpen && <div className=\"delete__options-container\">\n                            <div className=\"options-container__bar--outer\">\n                                <div className=\"options-container__bar--inner\"></div>\n                            </div>\n                            <button onClick={() => deleteTaskCheckButton(currentProjectId, currentTaskId, currentTaskType)} className=\"options-container__button btn-transparent\">\n                                <i className=\"options-container__button--delete fa-solid fa-check\"></i>\n                            </button>\n                            <button onClick={() => closeDeleteOptions()} className=\"options-container__button btn-transparent\">\n                                <i className=\"options-container__button--close fa-solid fa-xmark\"></i>\n                            </button>\n                        </div>}\n                    </div>\n                    {/* <input onChange={(e) => handleTaskTitleChange(e)} className=\"ticket-info__title\" value={currentTask.title} placeholder=\"Add Ticket Name...\" type=\"text\" /> */}\n                    {/* Author / Date / Time */}\n                    <p className=\"ticket-info__date\">Created by <strong className=\"ticket-info__text--strong\">{currentTask.author}</strong> on {currentTask.dateCreated} at {currentTask.timeCreated}.</p>\n                </div>\n            </div >\n            {/* Tag */}\n            <div className=\"ticket-info__tag-and-status\">\n                < div className=\"ticket-info__tag-container\" >\n                    <i className=\"ticket-info__tag-icon fa-solid fa-hashtag\"></i>\n                    <input onChange={(e) => handleTaskTagChange(e)} className=\"ticket-info__tag-input\" value={currentTask.tag} placeholder=\"Add Tag...\" type=\"text\" />\n                </div >\n                {statusButtonsShown && <div className=\"ticket-info__button-container\">\n                    <p className=\"ticket-info__status-text\">Status:</p>\n                    <button onClick={() => changeStatusButtonClicked('To Do')} className={`${currentTaskType === 'To Do' && 'to-do-button--selected'} ticket-info__status-button hover--blue btn-transparent`}>\n                        <i className=\"fa-solid fa-layer-group\"></i>\n                        {/* <p>To Do</p> */}\n                    </button>\n                    <button onClick={() => changeStatusButtonClicked('In Progress')} className={`${currentTaskType === 'In Progress' && 'in-progress-button--selected'} ticket-info__status-button hover--yellow btn-transparent`}>\n                        <i className=\"fa-solid fa-trowel-bricks\"></i>\n                        {/* <p>In Progress</p> */}\n                    </button>\n                    <button onClick={() => changeStatusButtonClicked('Complete')} className={`${currentTaskType === 'Complete' && 'complete-button--selected'} ticket-info__status-button hover--green btn-transparent`}>\n                        <i className=\"fa-solid fa-fire\"></i>\n                        {/* <p>Complete</p> */}\n                    </button>\n                </div>}\n                {!statusButtonsShown && <div className=\"ticket-info__button-container\">\n                    <p className=\"ticket-info__status-text\">Status:</p>\n                    {currentTaskType === 'To Do' && <button onClick={() => openStatusButtonsClicked()} className=\"ticket-info__status-button--small btn-transparent\">\n                        <i className=\"fa-solid fa-layer-group\"></i>\n                    </button>}\n                    {currentTaskType === 'In Progress' && <button onClick={() => openStatusButtonsClicked()} className=\"ticket-info__status-button--small btn-transparent\">\n                        <i className=\"fa-solid fa-trowel-bricks\"></i>\n                    </button>}\n                    {currentTaskType === 'Complete' && <button onClick={() => openStatusButtonsClicked()} className=\"ticket-info__status-button--small btn-transparent\">\n                        <i className=\"fa-solid fa-fire\"></i>\n                    </button>}\n                </div>}\n            </div>\n            {/* Description */}\n            <div className=\"ticket__description-container\">\n                <textarea onChange={(e) => handleTaskContentChange(e)} className=\"ticket__description\" value={currentTask.content} placeholder=\"Add Description...\" type=\"text\" />\n            </div>\n            <div className=\"comments-container\">\n                {/* <p className=\"comments-container__header\">Comments ({currentTask.comments ? currentTask.comments.length : 0})</p> */}\n                <p className=\"comments-container__header\">Comments ({\n                    [...currentTask.comments.filter(task => task.isDeleted === false)].length\n                })</p>\n\n                <div className=\"comments-container__comments\">\n                    {/* Show Comments: */}\n                    {currentTask.comments.length !== 0 && currentTask.comments.map(comment => {\n                        if (comment.isDeleted === false) {\n                            return <TaskComment\n                                key={comment.id}\n                                id={comment.id}\n                                author={comment.author}\n                                content={comment.content}\n                                dateCreated={comment.dateCreated}\n                                timeCreated={comment.timeCreated}\n                                isPriority={comment.isPriority}\n                                isLiked={comment.isLiked}\n                                isDeleted={comment.isDeleted}\n                                togglePriorityButtonClicked={(id) => togglePriorityButtonClicked(id)}\n                                toggleLikeButtonClicked={(id) => toggleLikeButtonClicked(id)}\n                                deleteCommentButtonClicked={(id) => deleteCommentButtonClicked(id)}\n                            />\n                        }\n                    })}\n                    {/* Add New Task Form */}\n                    <form className=\"task-page__add-task-form\">\n                        <input onChange={(e) => updateCommentInputValue(e)} className=\"add-task-form__input\" value={commentInputValue} placeholder=\"Add a Comment...\"></input>\n                        <ButtonStrong\n                            iconClass='fa-solid fa-plus'\n                            text='Add Comment'\n                            handleClick={(e) => createNewCommentClicked(e)}\n                        />\n                    </form>\n                    {/* No Comments: */}\n                    {[...currentTask.comments.filter(task => task.isDeleted === false)].length === 0 && <EmptyNotification\n                        icon='fa-solid fa-envelope-open'\n                        text='Looks like you have no comments!'\n                    />}\n\n                    {/* {currentTask.comments.length === 0 && <EmptyNotification\n                        icon='fa-solid fa-envelope-open'\n                        text='Looks like you have no comments!'\n                    />} */}\n                </div>\n            </div>\n        </div >\n    )\n}\n\nexport default TaskPage;","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\aside\\DropdownOption.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\ProjectBox.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Projects\\ProjectPage\\ProjectTask.js",["224","225"],[],"\nimport { toHaveDescription } from '@testing-library/jest-dom/dist/matchers';\nimport { computeHeadingLevel } from '@testing-library/react';\nimport './ProjectTask.css';\n\nfunction ProjectTask({ id, title, author, content, tag, timeCreated, dateCreated, dateCreatedShort, comments, isDeleted, taskType, openTaskPageClicked }) {\n    return (\n        <div className=\"list-item\">\n            <button onClick={() => openTaskPageClicked(id, taskType)} className=\"list-item__button btn btn-transparent\">\n                <div className=\"list-item__top\">\n                    <h4 className=\"list-item__title\">{title === \"\" ? 'Task' : title}</h4>\n                    <p className=\"list-item__info\">{author}, {dateCreatedShort}</p>\n                    <p className=\"list-item__description\">{content === \"\" ? 'Nothing of note for this task...' : content}</p>\n                </div>\n                <div className=\"list-item__footer\">\n                    <p className=\"list-item__tag\">#{tag === \"\" ? 'Project' : tag.toUpperCase()}</p>\n                    <div className=\"list-item__comments-btn btn-transparent\">\n                        <i className=\"fa-solid fa-message\"></i>\n                        {/* <p>{comments.length}</p> */}\n                        <p>{[...comments.filter(task => task.isDeleted === false)].length}</p>\n                    </div>\n                </div>\n            </button>\n        </div>\n    )\n}\n\nexport default ProjectTask;","D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Messages\\MessageBox.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Reports\\ReportBox.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\buttons\\ButtonStrong\\ButtonStrong.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\notifications\\NotificationBubble\\NotificationBubble.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\components\\main\\pages\\Task\\TaskComment.js",[],[],"D:\\Projects\\Issue_Tracker\\frontend\\src\\reusable\\notifications\\EmptyNotification\\EmptyNotification.js",[],[],{"ruleId":"226","severity":1,"message":"227","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":19},{"ruleId":"226","severity":1,"message":"230","line":67,"column":12,"nodeType":"228","messageId":"229","endLine":67,"endColumn":21},{"ruleId":"226","severity":1,"message":"231","line":73,"column":10,"nodeType":"228","messageId":"229","endLine":73,"endColumn":25},{"ruleId":"226","severity":1,"message":"232","line":74,"column":10,"nodeType":"228","messageId":"229","endLine":74,"endColumn":24},{"ruleId":"226","severity":1,"message":"233","line":75,"column":10,"nodeType":"228","messageId":"229","endLine":75,"endColumn":23},{"ruleId":"226","severity":1,"message":"234","line":76,"column":10,"nodeType":"228","messageId":"229","endLine":76,"endColumn":24},{"ruleId":"226","severity":1,"message":"235","line":77,"column":10,"nodeType":"228","messageId":"229","endLine":77,"endColumn":24},{"ruleId":"226","severity":1,"message":"236","line":79,"column":10,"nodeType":"228","messageId":"229","endLine":79,"endColumn":27},{"ruleId":"226","severity":1,"message":"237","line":80,"column":10,"nodeType":"228","messageId":"229","endLine":80,"endColumn":24},{"ruleId":"238","severity":1,"message":"239","line":180,"column":35,"nodeType":"240","messageId":"241","endLine":180,"endColumn":37},{"ruleId":"238","severity":1,"message":"242","line":292,"column":38,"nodeType":"240","messageId":"241","endLine":292,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":303,"column":36,"nodeType":"240","messageId":"241","endLine":303,"endColumn":38},{"ruleId":"226","severity":1,"message":"243","line":318,"column":12,"nodeType":"228","messageId":"229","endLine":318,"endColumn":28},{"ruleId":"238","severity":1,"message":"242","line":379,"column":38,"nodeType":"240","messageId":"241","endLine":379,"endColumn":40},{"ruleId":"244","severity":1,"message":"245","line":433,"column":12,"nodeType":"228","messageId":"246","endLine":433,"endColumn":24},{"ruleId":"238","severity":1,"message":"242","line":470,"column":38,"nodeType":"240","messageId":"241","endLine":470,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":474,"column":42,"nodeType":"240","messageId":"241","endLine":474,"endColumn":44},{"ruleId":"238","severity":1,"message":"242","line":477,"column":44,"nodeType":"240","messageId":"241","endLine":477,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":487,"column":48,"nodeType":"240","messageId":"241","endLine":487,"endColumn":50},{"ruleId":"238","severity":1,"message":"242","line":490,"column":44,"nodeType":"240","messageId":"241","endLine":490,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":499,"column":46,"nodeType":"240","messageId":"241","endLine":499,"endColumn":48},{"ruleId":"238","severity":1,"message":"242","line":502,"column":44,"nodeType":"240","messageId":"241","endLine":502,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":517,"column":38,"nodeType":"240","messageId":"241","endLine":517,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":521,"column":42,"nodeType":"240","messageId":"241","endLine":521,"endColumn":44},{"ruleId":"238","severity":1,"message":"242","line":524,"column":44,"nodeType":"240","messageId":"241","endLine":524,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":533,"column":48,"nodeType":"240","messageId":"241","endLine":533,"endColumn":50},{"ruleId":"238","severity":1,"message":"242","line":536,"column":44,"nodeType":"240","messageId":"241","endLine":536,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":545,"column":46,"nodeType":"240","messageId":"241","endLine":545,"endColumn":48},{"ruleId":"238","severity":1,"message":"242","line":548,"column":44,"nodeType":"240","messageId":"241","endLine":548,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":564,"column":38,"nodeType":"240","messageId":"241","endLine":564,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":568,"column":42,"nodeType":"240","messageId":"241","endLine":568,"endColumn":44},{"ruleId":"238","severity":1,"message":"242","line":571,"column":44,"nodeType":"240","messageId":"241","endLine":571,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":580,"column":48,"nodeType":"240","messageId":"241","endLine":580,"endColumn":50},{"ruleId":"238","severity":1,"message":"242","line":583,"column":44,"nodeType":"240","messageId":"241","endLine":583,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":592,"column":46,"nodeType":"240","messageId":"241","endLine":592,"endColumn":48},{"ruleId":"238","severity":1,"message":"242","line":595,"column":44,"nodeType":"240","messageId":"241","endLine":595,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":616,"column":40,"nodeType":"240","messageId":"241","endLine":616,"endColumn":42},{"ruleId":"238","severity":1,"message":"242","line":620,"column":44,"nodeType":"240","messageId":"241","endLine":620,"endColumn":46},{"ruleId":"238","severity":1,"message":"242","line":639,"column":50,"nodeType":"240","messageId":"241","endLine":639,"endColumn":52},{"ruleId":"238","severity":1,"message":"242","line":658,"column":48,"nodeType":"240","messageId":"241","endLine":658,"endColumn":50},{"ruleId":"238","severity":1,"message":"242","line":685,"column":38,"nodeType":"240","messageId":"241","endLine":685,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":706,"column":38,"nodeType":"240","messageId":"241","endLine":706,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":710,"column":42,"nodeType":"240","messageId":"241","endLine":710,"endColumn":44},{"ruleId":"238","severity":1,"message":"242","line":726,"column":48,"nodeType":"240","messageId":"241","endLine":726,"endColumn":50},{"ruleId":"238","severity":1,"message":"242","line":742,"column":46,"nodeType":"240","messageId":"241","endLine":742,"endColumn":48},{"ruleId":"238","severity":1,"message":"242","line":767,"column":38,"nodeType":"240","messageId":"241","endLine":767,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":771,"column":42,"nodeType":"240","messageId":"241","endLine":771,"endColumn":44},{"ruleId":"238","severity":1,"message":"242","line":792,"column":48,"nodeType":"240","messageId":"241","endLine":792,"endColumn":50},{"ruleId":"238","severity":1,"message":"242","line":813,"column":46,"nodeType":"240","messageId":"241","endLine":813,"endColumn":48},{"ruleId":"238","severity":1,"message":"242","line":842,"column":38,"nodeType":"240","messageId":"241","endLine":842,"endColumn":40},{"ruleId":"238","severity":1,"message":"242","line":852,"column":36,"nodeType":"240","messageId":"241","endLine":852,"endColumn":38},{"ruleId":"226","severity":1,"message":"247","line":10,"column":9,"nodeType":"228","messageId":"229","endLine":10,"endColumn":33},{"ruleId":"226","severity":1,"message":"248","line":12,"column":9,"nodeType":"228","messageId":"229","endLine":12,"endColumn":34},{"ruleId":"226","severity":1,"message":"249","line":3,"column":8,"nodeType":"228","messageId":"229","endLine":3,"endColumn":11},{"ruleId":"226","severity":1,"message":"250","line":5,"column":14,"nodeType":"228","messageId":"229","endLine":5,"endColumn":27},{"ruleId":"226","severity":1,"message":"251","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":26},{"ruleId":"226","severity":1,"message":"250","line":6,"column":14,"nodeType":"228","messageId":"229","endLine":6,"endColumn":27},{"ruleId":"226","severity":1,"message":"227","line":2,"column":20,"nodeType":"228","messageId":"229","endLine":2,"endColumn":29},{"ruleId":"226","severity":1,"message":"252","line":4,"column":8,"nodeType":"228","messageId":"229","endLine":4,"endColumn":16},{"ruleId":"226","severity":1,"message":"253","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":19},{"ruleId":"254","severity":1,"message":"255","line":24,"column":8,"nodeType":"256","endLine":24,"endColumn":10,"suggestions":"257"},{"ruleId":"226","severity":1,"message":"258","line":7,"column":10,"nodeType":"228","messageId":"229","endLine":7,"endColumn":37},{"ruleId":"238","severity":1,"message":"242","line":25,"column":42,"nodeType":"240","messageId":"241","endLine":25,"endColumn":44},{"ruleId":"238","severity":1,"message":"242","line":31,"column":52,"nodeType":"240","messageId":"241","endLine":31,"endColumn":54},{"ruleId":"238","severity":1,"message":"242","line":38,"column":58,"nodeType":"240","messageId":"241","endLine":38,"endColumn":60},{"ruleId":"238","severity":1,"message":"242","line":45,"column":56,"nodeType":"240","messageId":"241","endLine":45,"endColumn":58},{"ruleId":"254","severity":1,"message":"259","line":54,"column":8,"nodeType":"256","endLine":54,"endColumn":10,"suggestions":"260"},{"ruleId":"238","severity":1,"message":"261","line":196,"column":92,"nodeType":"240","messageId":"262","endLine":196,"endColumn":94},{"ruleId":"226","severity":1,"message":"263","line":2,"column":10,"nodeType":"228","messageId":"229","endLine":2,"endColumn":27},{"ruleId":"226","severity":1,"message":"264","line":3,"column":10,"nodeType":"228","messageId":"229","endLine":3,"endColumn":29},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'openAside' is defined but never used.","'dashboardIsOpen' is assigned a value but never used.","'projectsIsOpen' is assigned a value but never used.","'reportsIsOpen' is assigned a value but never used.","'messagesIsOpen' is assigned a value but never used.","'settingsIsOpen' is assigned a value but never used.","'projectPageIsOpen' is assigned a value but never used.","'taskPageIsOpen' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a return value from arrow function.","ArrowFunctionExpression","expectedInside","Array.prototype.filter() expects a return value from arrow function.","'createNewMessage' is defined but never used.","no-redeclare","'openTaskPage' is already defined.","redeclared","'read_reportNotifications' is assigned a value but never used.","'read_messageNotifications' is assigned a value but never used.","'Pic' is defined but never used.","'buttonClicked' is defined but never used.","'useDeferredValue' is defined but never used.","'Projects' is defined but never used.","'userState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userData.projects'. Either include it or remove the dependency array.","ArrayExpression",["265"],"'toHaveAccessibleDescription' is defined but never used.","React Hook useEffect has missing dependencies: 'currentProjectId', 'currentTaskId', 'currentTaskType', 'updateCurrentProject', and 'userData.projects'. Either include them or remove the dependency array. If 'updateCurrentProject' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["266"],"Array.prototype.map() expects a value to be returned at the end of arrow function.","expectedAtEnd","'toHaveDescription' is defined but never used.","'computeHeadingLevel' is defined but never used.",{"desc":"267","fix":"268"},{"desc":"269","fix":"270"},"Update the dependencies array to be: [userData.projects]",{"range":"271","text":"272"},"Update the dependencies array to be: [currentProjectId, currentTaskId, currentTaskType, updateCurrentProject, userData.projects]",{"range":"273","text":"274"},[1022,1024],"[userData.projects]",[2613,2615],"[currentProjectId, currentTaskId, currentTaskType, updateCurrentProject, userData.projects]"]