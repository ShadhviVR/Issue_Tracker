{"ast":null,"code":"var _jsxFileName = \"D:\\\\Projects\\\\Issue_Tracker\\\\frontend\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Aside from './components/aside/Aside';\nimport Main from './components/main/Main';\nimport IconButton from './reusable/buttons/IconButton/IconButton';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  // --- üìÖ Dates üìÖ ---\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const months_short = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  function getDay() {\n    return days[new Date().getDay()];\n  }\n\n  function getDate() {\n    return new Date().getDate();\n  }\n\n  function getMonth() {\n    return months[new Date().getMonth()];\n  }\n\n  function getMonth_Short() {\n    return months_short[new Date().getMonth()];\n  }\n\n  function getYear() {\n    return new Date().getFullYear();\n  }\n\n  function getFullDate() {\n    const day = getDay();\n    const date = getDate();\n    const month = getMonth();\n    const year = getYear();\n    return `${day} ${date} ${month}, ${year}`;\n  }\n\n  function getShortDate() {\n    const date = getDate();\n    const month = getMonth_Short();\n    const year = getYear();\n    return `${date} ${month}, ${year}`;\n  } // --- ‚è∞ Times ‚è∞ ---\n\n\n  function getCurrentTime() {\n    let hours = new Date().getHours();\n    let minutes = new Date().getMinutes();\n\n    if (hours < 10) {\n      hours = `${0}${hours}`;\n    }\n\n    if (minutes < 10) {\n      minutes = `${0}${minutes}`;\n    }\n\n    return `${hours}:${minutes}`;\n  } // --- Aside ---\n\n\n  const [asideIsOpen, setAsideIsOpen] = useState(true); // Toggle Aside\n\n  function toggleAside() {\n    setAsideIsOpen(!asideIsOpen);\n  } // Open Aside\n\n\n  function openAside() {\n    setAsideIsOpen(true);\n  } // --- PAGES ---\n\n\n  const [dashboardIsOpen, setDashboardIsOpen] = useState(true);\n  const [projectsIsOpen, setProjectsIsOpen] = useState(false);\n  const [reportsIsOpen, setReportsIsOpen] = useState(false);\n  const [messagesIsOpen, setMessagesIsOpen] = useState(false);\n  const [settingsIsOpen, setSettingsIsOpen] = useState(false);\n  const [projectPageIsOpen, setProjectPageIsOpen] = useState(false);\n  const [taskPageIsOpen, setTaskPageIsOpen] = useState(false); // Aside Button Clicked:\n\n  function asideButtonClicked(title) {\n    if (title === 'Dashboard') {\n      openDashboard();\n    } else if (title === 'Projects') {\n      openProjects();\n    } else if (title === 'Reports') {\n      openReports();\n    } else if (title === 'Messages') {\n      openMessages();\n    } else if (title === 'Settings') {\n      openSettings();\n    }\n  } // Aside Function (depending on button clicked):\n\n\n  function openDashboard() {\n    console.log('Dashboard Opened!');\n    updateCurrentPageName('Dashboard');\n    setDashboardIsOpen(true);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openProjects() {\n    console.log('Projects Opened!'); // setAsideIsOpen(true);\n\n    updateCurrentPageName('Projects');\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(true);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openReports() {\n    console.log('Reports Opened!');\n    updateCurrentPageName('Reports');\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(true);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openMessages() {\n    console.log('Messages Opened!');\n    updateCurrentPageName('Messages');\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(true);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openSettings() {\n    console.log('Settings Opened!');\n    updateCurrentPageName('Settings');\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(true);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  } // OPEN PROJECT\n\n\n  const [currentProjectId, setCurrentProjectId] = useState(null);\n\n  function openProjectPage(id) {\n    console.log('Project Page Opened!');\n    updateCurrentPageName('Project Page');\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(true);\n    setTaskPageIsOpen(false);\n    userData.projects.map(project => {\n      if (project.id === id) {\n        // console.log('ID is ' + project);\n        console.log(project);\n        setCurrentProjectId(project.id);\n      }\n\n      console.log(`Opening Project ID ${id}`);\n    });\n  } // OPEN TASK\n\n\n  function openTaskPage() {\n    console.log('Task Page Opened!');\n    updateCurrentPageName('Task Page');\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(true);\n  }\n\n  function updateCurrentPageName(page) {\n    setCurrentPageName(page);\n  } // ----- üî® EDITING PROJECT VALUES üî® -----\n  // Update Input Value:\n\n\n  function updateInputValue(e, target) {\n    target.title = e.target.value; // console.log(target);\n\n    updateAll();\n  } // --- USER DETAILS ---\n\n\n  const [currentPageName, setCurrentPageName] = useState('Dashboard'); // const [username, setUsername] = useState('Admin');\n\n  const [userData, setUserData] = useState({\n    \"username\": \"Admin\",\n    \"projects\": [// --- START OF PROJECTS ---\n    {\n      \"id\": 1,\n      \"title\": \"Getting Started\",\n      \"author\": \"Botty Bot\",\n      \"timeCreated\": getCurrentTime(),\n      \"dateCreated\": getFullDate(),\n      \"tasks\": {\n        \"toDo\": [{\n          \"id\": 1,\n          \"title\": \"Create Your Own Project!\",\n          \"author\": \"Botty Bot\",\n          \"content\": \"Use ByeBug to plan and organise your own projects.\",\n          \"tag\": \"Setup\",\n          \"timeCreated\": getCurrentTime(),\n          \"dateCreated\": getFullDate(),\n          \"dateCreatedShort\": getShortDate(),\n          \"comments\": [{\n            \"id\": 1,\n            \"author\": \"Botty Bot\",\n            \"content\": \"You can create your own project by navigating to the 'Projects' page and pressing the 'Create Project' button!\",\n            \"dateCreated\": getFullDate(),\n            \"timeCreated\": getCurrentTime(),\n            \"isPriority\": false,\n            \"isLiked\": false,\n            \"isDeleted\": false\n          }, {\n            \"id\": 2,\n            \"author\": \"Botty Bot\",\n            \"content\": \"You can change the status of your current task by pressing the icon next to 'Status'.\",\n            \"dateCreated\": getFullDate(),\n            \"timeCreated\": getCurrentTime(),\n            \"isPriority\": false,\n            \"isLiked\": false,\n            \"isDeleted\": false\n          }],\n          \"isDeleted\": false\n        }],\n        \"inProgress\": [],\n        \"complete\": []\n      },\n      \"isDeleted\": false,\n      \"isComplete\": false\n    }],\n    \"reports\": [],\n    \"messages\": [{\n      \"id\": 1,\n      \"title\": \"Welcome to ByeBug!\",\n      \"content\": `Hello! Welcome to ByeBug - the place to break down your projects into smaller, manageable tasks! Navigate to the 'Projects' page and get started right away! We hope you have a pleasant experience organising your work!`,\n      \"author\": \"Botty Bot\",\n      \"timeCreated\": getCurrentTime(),\n      \"dateCreated\": getFullDate(),\n      \"isRead\": false,\n      \"isDeleted\": false\n    }]\n  }); // Change Message isRead to true:\n\n  function updateMessageIsRead(id) {\n    userData.messages.filter(message => {\n      if (message.id === id) {\n        message.isRead = true;\n        console.log(message);\n        updateAll();\n      }\n    });\n  } // Change Report isRead to true:\n\n\n  function updateReportIsRead(id) {\n    userData.reports.filter(report => {\n      if (report.id === id) {\n        report.isRead = true;\n        console.log(report);\n        updateAll();\n      }\n    });\n  } // *Function to re-render userData once updated:\n\n\n  function updateAll() {\n    setUserData({ ...userData\n    });\n  } // Create New Message Function (currently inactive)\n\n\n  function createNewMessage(title, author, timeCreated, dateCreated, content, isRead, isDeleted) {\n    userData.messages.push({\n      \"id\": userData.messages.length + 1,\n      \"title\": \"New One\",\n      \"author\": \"Botty Bot\",\n      \"timeCreated\": '18:30',\n      \"dateCreated\": 'Tuesday 13 August, 2022',\n      \"content\": \"Hello, this is some example message content just to check out how it looks once it is rendered in the broswer. Thanks!\",\n      \"isRead\": false,\n      \"isDeleted\": false\n    });\n    updateAll();\n    console.log(userData.messages);\n  } // Create New Report Function (current inactive)\n\n\n  function createNewReport(title, content, timeCreated, dateCreated, reportType, isRead, isDeleted) {\n    userData.reports.push({\n      \"id\": userData.reports.length + 1,\n      \"title\": title,\n      \"content\": content,\n      \"timeCreated\": timeCreated,\n      \"dateCreated\": dateCreated,\n      \"reportType\": reportType,\n      \"isRead\": isRead,\n      \"isDeleted\": isDeleted\n    });\n    updateAll();\n    console.log(userData.reports);\n  } // Create New Project\n\n\n  function createNewProject(projectName) {\n    userData.projects.push({\n      \"id\": userData.projects.length + 1,\n      \"title\": projectName,\n      \"author\": userData.username,\n      \"timeCreated\": getCurrentTime(),\n      \"dateCreated\": getFullDate(),\n      \"tasks\": {\n        \"toDo\": [],\n        \"inProgress\": [],\n        \"complete\": []\n      },\n      \"isDeleted\": false,\n      \"isComplete\": false\n    });\n    updateAll();\n    openProjectPage(userData.projects.length);\n    console.log(userData.projects);\n  } // Create New Project Task:\n\n\n  function createNewTask(projectId, taskType) {\n    // console.log(`This is a '${taskType}' for project ID ${projectId}`);\n    userData.projects.filter(project => {\n      if (project.id === projectId) {\n        if (taskType === 'To Do') {\n          project.tasks.toDo.push({\n            \"id\": project.tasks.toDo.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.toDo.length, 'To Do', projectId);\n        } else if (taskType === 'In Progress') {\n          project.tasks.inProgress.push({\n            \"id\": project.tasks.inProgress.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.inProgress.length, 'In Progress', projectId);\n        } else if (taskType === 'Complete') {\n          project.tasks.complete.push({\n            \"id\": project.tasks.complete.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.complete.length, 'Complete', projectId);\n        }\n\n        updateAll();\n      }\n    });\n  } // Open Project Task Page\n\n\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTaskType, setCurrentTaskType] = useState(null);\n\n  function openTaskPage(taskId, taskType, currentProjectId) {\n    // console.log(`This is task ${taskId} of the ${taskType} category for project ${currentProjectId}`);\n    setCurrentPageName('Task Page');\n    setCurrentTaskId(taskId);\n    setCurrentTaskType(taskType);\n    setCurrentProjectId(currentProjectId); // Need to pass these 3 values into Main.js and into TaskPage.js\n  } // Back Button from TaskPage to Project Page ---\n\n\n  function updateCurrentProject(id) {\n    setCurrentProjectId(id);\n  }\n\n  function taskBackButtonClicked() {\n    openProjectPage(currentProjectId);\n  } // ---\n  // UPDATE INPUT VALUES OF TASK PAGE\n\n\n  function updateTaskTitleValue(e, target) {\n    // console.log(e.target.value)\n    // console.log(target.title)\n    target.title = e.target.value;\n    updateAll();\n  }\n\n  function updateTaskTagValue(e, target) {\n    target.tag = e.target.value;\n    updateAll();\n  }\n\n  function updateTaskContentValue(e, target) {\n    target.content = e.target.value;\n    updateAll();\n  } // Toggle Priority Button (Comment)\n\n\n  function togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                  console.log(comment.isPriority);\n                }\n              });\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                }\n              });\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    updateAll();\n  } // Toggle Like Button (Comment)\n\n\n  function toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              });\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              });\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    updateAll();\n  } // Delete Button (Comment)\n\n\n  function deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              });\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              });\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              });\n            }\n          });\n        }\n      }\n    });\n    updateAll();\n  } // Create New Comment\n\n\n  const [commentInputValue, setCommentInputValue] = useState('');\n\n  function updateCommentInputValue(e) {\n    setCommentInputValue(e.target.value);\n    updateAll();\n  }\n\n  function createNewComment(currentProjectId, currentTaskId, currentTaskType) {\n    if (commentInputValue !== '') {\n      userData.projects.filter(project => {\n        if (project.id === currentProjectId) {\n          if (currentTaskType === 'To Do') {\n            // console.log(project.tasks.toDo);\n            project.tasks.toDo.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push({\n                  \"id\": task.comments.length + 1,\n                  \"author\": userData.username,\n                  \"content\": commentInputValue,\n                  \"dateCreated\": getFullDate(),\n                  \"timeCreated\": getCurrentTime(),\n                  \"isPriority\": false,\n                  \"isLiked\": false,\n                  \"isDeleted\": false\n                });\n              }\n            });\n          } else if (currentTaskType === 'In Progress') {\n            // console.log(project.tasks.inProgress);\n            project.tasks.inProgress.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push({\n                  \"id\": task.comments.length + 1,\n                  \"author\": userData.username,\n                  \"content\": commentInputValue,\n                  \"dateCreated\": getFullDate(),\n                  \"timeCreated\": getCurrentTime(),\n                  \"isPriority\": false,\n                  \"isLiked\": false,\n                  \"isDeleted\": false\n                });\n              }\n            });\n          } else if (currentTaskType === 'Complete') {\n            // console.log(project.tasks.complete);\n            project.tasks.complete.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push({\n                  \"id\": task.comments.length + 1,\n                  \"author\": userData.username,\n                  \"content\": commentInputValue,\n                  \"dateCreated\": getFullDate(),\n                  \"timeCreated\": getCurrentTime(),\n                  \"isPriority\": false,\n                  \"isLiked\": false,\n                  \"isDeleted\": false\n                });\n              }\n            });\n          }\n        }\n      });\n      setCommentInputValue('');\n      updateAll();\n    }\n  }\n\n  function deleteProjectButton(currentProjectId) {\n    // console.log(currentProjectId)\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        project.isDeleted = true; // console.log(project);\n\n        createNewReport('Project Deleted', `'${project.title}' was deleted by ${userData.username}.`, getCurrentTime(), getFullDate(), 'Warning', false, false);\n      }\n    });\n    updateAll();\n    setCurrentPageName('Projects');\n  }\n\n  function deleteTaskButton(currentProjectId, currentTaskId, currentTaskType) {\n    // console.log('Task deleted')\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        // console.log(project)\n        if (currentTaskType === 'To Do') {\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true; // console.log(task)\n\n              createNewReport('Task Deleted', `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'To Do' category at the time of deletion.`, getCurrentTime(), getFullDate(), 'Warning', false, false);\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true; // console.log(task)\n\n              createNewReport('Task Deleted', `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'In Progress' category at the time of deletion.`, getCurrentTime(), getFullDate(), 'Warning', false, false);\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true; // console.log(task)\n\n              createNewReport('Task Deleted', `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'Complete' category at the time of deletion.`, getCurrentTime(), getFullDate(), 'Warning', false, false);\n            }\n          });\n        }\n      }\n    });\n    updateAll();\n    setCurrentPageName('Project Page');\n  } // Change Task Status\n\n\n  function changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId) {\n    // console.log(changeToStatus);\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        // console.log(project);\n        if (currentTaskType === 'To Do') {\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task\n              };\n\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n\n              task.isDeleted = true; // console.log(project);\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task\n              };\n\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n\n              task.isDeleted = true; // console.log(task);\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task\n              };\n\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n\n              task.isDeleted = true; // console.log(task);\n            }\n          });\n        }\n      }\n    });\n    setCurrentProjectId(currentProjectId);\n    updateAll();\n  }\n\n  function deleteMessage(id) {\n    // console.log(`Message ${id} is deleted`);\n    userData.messages.filter(message => {\n      if (message.id === id) {\n        message.isDeleted = true;\n      }\n    });\n    updateAll();\n  }\n\n  function deleteReport(id) {\n    // console.log(`Report ${id} is deleted`);\n    userData.reports.filter(report => {\n      if (report.id === id) {\n        report.isDeleted = true;\n      }\n    });\n    updateAll();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: asideIsOpen ? 'aside-container' : 'aside-container aside-container-disabled',\n        children: [/*#__PURE__*/_jsxDEV(IconButton, {\n          iconClass: `aside-container__button ${asideIsOpen ? 'fa-solid fa-angles-left' : 'fa-solid fa-angles-right'}`,\n          handleClick: () => toggleAside()\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 864,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Aside, {\n          asideIsOpen: asideIsOpen,\n          handleClick: title => asideButtonClicked(title),\n          updateCurrentPageName: () => updateCurrentPageName('Projects'),\n          userData: userData,\n          createNewProject: projectName => createNewProject(projectName),\n          openProjectPage: id => openProjectPage(id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 868,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 863,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"main-container\",\n        children: /*#__PURE__*/_jsxDEV(Main, {\n          currentPageName: currentPageName,\n          updateCurrentPageName: page => updateCurrentPageName(page),\n          getYear: () => getYear(),\n          userData: userData,\n          updateMessageIsRead: id => updateMessageIsRead(id),\n          updateReportIsRead: id => updateReportIsRead(id),\n          createNewProject: projectName => createNewProject(projectName),\n          openProjectPage: id => openProjectPage(id),\n          currentProjectId: currentProjectId,\n          openProjects: () => openProjects(),\n          updateInputValue: (e, target) => updateInputValue(e, target),\n          asideIsOpen: asideIsOpen,\n          createNewTask: (projectId, taskType) => createNewTask(projectId, taskType),\n          openTaskPage: (taskId, taskType, currentProjectId) => openTaskPage(taskId, taskType, currentProjectId),\n          currentTaskId: currentTaskId,\n          currentTaskType: currentTaskType,\n          updateCurrentProject: id => updateCurrentProject(id),\n          taskBackButtonClicked: () => taskBackButtonClicked(),\n          updateTaskTitleValue: (e, target) => updateTaskTitleValue(e, target),\n          updateTaskTagValue: (e, target) => updateTaskTagValue(e, target),\n          updateTaskContentValue: (e, target) => updateTaskContentValue(e, target),\n          togglePriorityButton: (currentProjectId, currentTaskType, currentTaskId, id) => togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id),\n          toggleLikeButton: (currentProjectId, currentTaskType, currentTaskId, id) => toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id),\n          deleteCommentButton: (currentProjectId, currentTaskType, currentTaskId, id) => deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id),\n          createNewComment: (currentProjectId, currentTaskId, currentTaskType) => createNewComment(currentProjectId, currentTaskId, currentTaskType),\n          updateCommentInputValue: e => updateCommentInputValue(e),\n          commentInputValue: commentInputValue,\n          deleteProjectButton: currentProjectId => deleteProjectButton(currentProjectId),\n          deleteTaskButton: (currentProjectId, currentTaskId, currentTaskType) => deleteTaskButton(currentProjectId, currentTaskId, currentTaskType),\n          changeTaskStatus: (changeToStatus, currentProjectId, currentTaskType, currentTaskId) => changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId),\n          openReports: () => openReports(),\n          openMessages: () => openMessages(),\n          deleteMessage: id => deleteMessage(id),\n          deleteReport: id => deleteReport(id)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 878,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 877,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 862,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 861,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"lLcVTEb+zjediwmJvlX8zZOxfJE=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","Aside","Main","IconButton","App","days","months","months_short","getDay","Date","getDate","getMonth","getMonth_Short","getYear","getFullYear","getFullDate","day","date","month","year","getShortDate","getCurrentTime","hours","getHours","minutes","getMinutes","asideIsOpen","setAsideIsOpen","toggleAside","openAside","dashboardIsOpen","setDashboardIsOpen","projectsIsOpen","setProjectsIsOpen","reportsIsOpen","setReportsIsOpen","messagesIsOpen","setMessagesIsOpen","settingsIsOpen","setSettingsIsOpen","projectPageIsOpen","setProjectPageIsOpen","taskPageIsOpen","setTaskPageIsOpen","asideButtonClicked","title","openDashboard","openProjects","openReports","openMessages","openSettings","console","log","updateCurrentPageName","currentProjectId","setCurrentProjectId","openProjectPage","id","userData","projects","map","project","openTaskPage","page","setCurrentPageName","updateInputValue","e","target","value","updateAll","currentPageName","setUserData","updateMessageIsRead","messages","filter","message","isRead","updateReportIsRead","reports","report","createNewMessage","author","timeCreated","dateCreated","content","isDeleted","push","length","createNewReport","reportType","createNewProject","projectName","username","createNewTask","projectId","taskType","tasks","toDo","inProgress","complete","currentTaskId","setCurrentTaskId","currentTaskType","setCurrentTaskType","taskId","updateCurrentProject","taskBackButtonClicked","updateTaskTitleValue","updateTaskTagValue","tag","updateTaskContentValue","togglePriorityButton","task","comments","comment","isPriority","toggleLikeButton","isLiked","deleteCommentButton","commentInputValue","setCommentInputValue","updateCommentInputValue","createNewComment","deleteProjectButton","deleteTaskButton","changeTaskStatus","changeToStatus","newTask","deleteMessage","deleteReport"],"sources":["D:/Projects/Issue_Tracker/frontend/src/App.js"],"sourcesContent":["\nimport { useEffect, useState } from 'react';\nimport './App.css';\nimport Aside from './components/aside/Aside';\nimport Main from './components/main/Main';\nimport IconButton from './reusable/buttons/IconButton/IconButton';\n\nfunction App() {\n  // --- üìÖ Dates üìÖ ---\n  const days = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];\n  const months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];\n  const months_short = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];\n\n  function getDay() {\n    return days[new Date().getDay()];\n  }\n  function getDate() {\n    return new Date().getDate();\n  }\n  function getMonth() {\n    return months[new Date().getMonth()];\n  }\n  function getMonth_Short() {\n    return months_short[new Date().getMonth()];\n  }\n  function getYear() {\n    return new Date().getFullYear();\n  }\n  function getFullDate() {\n    const day = getDay();\n    const date = getDate();\n    const month = getMonth();\n    const year = getYear();\n    return `${day} ${date} ${month}, ${year}`;\n  }\n\n  function getShortDate() {\n    const date = getDate();\n    const month = getMonth_Short();\n    const year = getYear();\n    return `${date} ${month}, ${year}`;\n  }\n\n  // --- ‚è∞ Times ‚è∞ ---\n  function getCurrentTime() {\n    let hours = new Date().getHours();\n    let minutes = new Date().getMinutes();\n\n    if (hours < 10) {\n      hours = `${0}${hours}`;\n    }\n\n    if (minutes < 10) {\n      minutes = `${0}${minutes}`;\n    }\n\n    return `${hours}:${minutes}`;\n  }\n\n  // --- Aside ---\n  const [asideIsOpen, setAsideIsOpen] = useState(true);\n  // Toggle Aside\n  function toggleAside() {\n    setAsideIsOpen(!asideIsOpen);\n  }\n  // Open Aside\n  function openAside() {\n    setAsideIsOpen(true);\n  }\n\n\n  // --- PAGES ---\n  const [dashboardIsOpen, setDashboardIsOpen] = useState(true);\n  const [projectsIsOpen, setProjectsIsOpen] = useState(false);\n  const [reportsIsOpen, setReportsIsOpen] = useState(false);\n  const [messagesIsOpen, setMessagesIsOpen] = useState(false);\n  const [settingsIsOpen, setSettingsIsOpen] = useState(false);\n\n  const [projectPageIsOpen, setProjectPageIsOpen] = useState(false);\n  const [taskPageIsOpen, setTaskPageIsOpen] = useState(false);\n\n  // Aside Button Clicked:\n  function asideButtonClicked(title) {\n    if (title === 'Dashboard') {\n      openDashboard();\n    } else if (title === 'Projects') {\n      openProjects();\n    } else if (title === 'Reports') {\n      openReports();\n    } else if (title === 'Messages') {\n      openMessages();\n    } else if (title === 'Settings') {\n      openSettings();\n    }\n  }\n\n  // Aside Function (depending on button clicked):\n  function openDashboard() {\n    console.log('Dashboard Opened!')\n    updateCurrentPageName('Dashboard');\n\n    setDashboardIsOpen(true);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openProjects() {\n    console.log('Projects Opened!');\n    // setAsideIsOpen(true);\n    updateCurrentPageName('Projects');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(true);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openReports() {\n    console.log('Reports Opened!')\n    updateCurrentPageName('Reports');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(true);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openMessages() {\n    console.log('Messages Opened!')\n    updateCurrentPageName('Messages');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(true);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n  function openSettings() {\n    console.log('Settings Opened!')\n    updateCurrentPageName('Settings');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(true);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(false);\n  }\n\n\n  // OPEN PROJECT\n  const [currentProjectId, setCurrentProjectId] = useState(null);\n\n  function openProjectPage(id) {\n    console.log('Project Page Opened!')\n    updateCurrentPageName('Project Page');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(true);\n    setTaskPageIsOpen(false);\n\n    userData.projects.map(project => {\n      if (project.id === id) {\n        // console.log('ID is ' + project);\n        console.log(project);\n        setCurrentProjectId(project.id);\n      }\n      console.log(`Opening Project ID ${id}`);\n    });\n  }\n\n  // OPEN TASK\n  function openTaskPage() {\n    console.log('Task Page Opened!')\n    updateCurrentPageName('Task Page');\n\n    setDashboardIsOpen(false);\n    setProjectsIsOpen(false);\n    setReportsIsOpen(false);\n    setMessagesIsOpen(false);\n    setSettingsIsOpen(false);\n    setProjectPageIsOpen(false);\n    setTaskPageIsOpen(true);\n  }\n\n  function updateCurrentPageName(page) {\n    setCurrentPageName(page);\n  }\n  // ----- üî® EDITING PROJECT VALUES üî® -----\n  // Update Input Value:\n  function updateInputValue(e, target) {\n    target.title = e.target.value;\n    // console.log(target);\n    updateAll();\n  }\n\n\n  // --- USER DETAILS ---\n  const [currentPageName, setCurrentPageName] = useState('Dashboard');\n  // const [username, setUsername] = useState('Admin');\n  const [userData, setUserData] = useState(\n    {\n      \"username\": \"Admin\",\n      \"projects\": [\n        // --- START OF PROJECTS ---\n        {\n          \"id\": 1,\n          \"title\": \"Getting Started\",\n          \"author\": \"Botty Bot\",\n          \"timeCreated\": getCurrentTime(),\n          \"dateCreated\": getFullDate(),\n          \"tasks\": {\n            \"toDo\": [\n              {\n                \"id\": 1,\n                \"title\": \"Create Your Own Project!\",\n                \"author\": \"Botty Bot\",\n                \"content\": \"Use ByeBug to plan and organise your own projects.\",\n                \"tag\": \"Setup\",\n                \"timeCreated\": getCurrentTime(),\n                \"dateCreated\": getFullDate(),\n                \"dateCreatedShort\": getShortDate(),\n                \"comments\": [\n                  {\n                    \"id\": 1,\n                    \"author\": \"Botty Bot\",\n                    \"content\": \"You can create your own project by navigating to the 'Projects' page and pressing the 'Create Project' button!\",\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  },\n                  {\n                    \"id\": 2,\n                    \"author\": \"Botty Bot\",\n                    \"content\": \"You can change the status of your current task by pressing the icon next to 'Status'.\",\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  },\n                ],\n                \"isDeleted\": false,\n              },\n            ],\n            \"inProgress\": [],\n            \"complete\": [],\n          },\n          \"isDeleted\": false,\n          \"isComplete\": false,\n        }\n      ],\n      \"reports\": [\n      ],\n      \"messages\": [\n        {\n          \"id\": 1,\n          \"title\": \"Welcome to ByeBug!\",\n          \"content\": `Hello! Welcome to ByeBug - the place to break down your projects into smaller, manageable tasks! Navigate to the 'Projects' page and get started right away! We hope you have a pleasant experience organising your work!`,\n          \"author\": \"Botty Bot\",\n          \"timeCreated\": getCurrentTime(),\n          \"dateCreated\": getFullDate(),\n          \"isRead\": false,\n          \"isDeleted\": false\n        },\n      ]\n    }\n  )\n\n  // Change Message isRead to true:\n  function updateMessageIsRead(id) {\n    userData.messages.filter(message => {\n      if (message.id === id) {\n        message.isRead = true;\n        console.log(message);\n        updateAll();\n      }\n    })\n  }\n\n  // Change Report isRead to true:\n  function updateReportIsRead(id) {\n    userData.reports.filter(report => {\n      if (report.id === id) {\n        report.isRead = true;\n        console.log(report);\n        updateAll();\n      }\n    })\n  }\n\n  // *Function to re-render userData once updated:\n  function updateAll() {\n    setUserData({ ...userData });\n  }\n\n  // Create New Message Function (currently inactive)\n  function createNewMessage(title, author, timeCreated, dateCreated, content, isRead, isDeleted) {\n    userData.messages.push(\n      {\n        \"id\": userData.messages.length + 1,\n        \"title\": \"New One\",\n        \"author\": \"Botty Bot\",\n        \"timeCreated\": '18:30',\n        \"dateCreated\": 'Tuesday 13 August, 2022',\n        \"content\": \"Hello, this is some example message content just to check out how it looks once it is rendered in the broswer. Thanks!\",\n        \"isRead\": false,\n        \"isDeleted\": false\n      }\n    )\n    updateAll();\n    console.log(userData.messages);\n  }\n\n  // Create New Report Function (current inactive)\n  function createNewReport(title, content, timeCreated, dateCreated, reportType, isRead, isDeleted) {\n    userData.reports.push(\n      {\n        \"id\": userData.reports.length + 1,\n        \"title\": title,\n        \"content\": content,\n        \"timeCreated\": timeCreated,\n        \"dateCreated\": dateCreated,\n        \"reportType\": reportType,\n        \"isRead\": isRead,\n        \"isDeleted\": isDeleted\n      }\n    )\n    updateAll();\n    console.log(userData.reports);\n  }\n\n  // Create New Project\n  function createNewProject(projectName) {\n    userData.projects.push(\n      {\n        \"id\": userData.projects.length + 1,\n        \"title\": projectName,\n        \"author\": userData.username,\n        \"timeCreated\": getCurrentTime(),\n        \"dateCreated\": getFullDate(),\n        \"tasks\": {\n          \"toDo\": [],\n          \"inProgress\": [],\n          \"complete\": []\n        },\n        \"isDeleted\": false,\n        \"isComplete\": false\n      },\n    )\n    updateAll();\n    openProjectPage(userData.projects.length);\n    console.log(userData.projects);\n  }\n\n  // Create New Project Task:\n  function createNewTask(projectId, taskType) {\n    // console.log(`This is a '${taskType}' for project ID ${projectId}`);\n    userData.projects.filter(project => {\n      if (project.id === projectId) {\n        if (taskType === 'To Do') {\n          project.tasks.toDo.push({\n            \"id\": project.tasks.toDo.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          })\n          openTaskPage(project.tasks.toDo.length, 'To Do', projectId);\n        } else if (taskType === 'In Progress') {\n          project.tasks.inProgress.push({\n            \"id\": project.tasks.inProgress.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.inProgress.length, 'In Progress', projectId);\n        } else if (taskType === 'Complete') {\n          project.tasks.complete.push({\n            \"id\": project.tasks.complete.length + 1,\n            \"title\": \"\",\n            \"author\": userData.username,\n            \"content\": \"\",\n            \"tag\": \"\",\n            \"timeCreated\": getCurrentTime(),\n            \"dateCreated\": getFullDate(),\n            \"dateCreatedShort\": getShortDate(),\n            \"comments\": [],\n            \"isDeleted\": false\n          });\n          openTaskPage(project.tasks.complete.length, 'Complete', projectId);\n        }\n        updateAll();\n      }\n    })\n  }\n\n  // Open Project Task Page\n  const [currentTaskId, setCurrentTaskId] = useState(null);\n  const [currentTaskType, setCurrentTaskType] = useState(null);\n\n  function openTaskPage(taskId, taskType, currentProjectId) {\n    // console.log(`This is task ${taskId} of the ${taskType} category for project ${currentProjectId}`);\n    setCurrentPageName('Task Page');\n    setCurrentTaskId(taskId);\n    setCurrentTaskType(taskType);\n    setCurrentProjectId(currentProjectId);\n    // Need to pass these 3 values into Main.js and into TaskPage.js\n  }\n\n  // Back Button from TaskPage to Project Page ---\n  function updateCurrentProject(id) {\n    setCurrentProjectId(id);\n  }\n  function taskBackButtonClicked() {\n    openProjectPage(currentProjectId);\n  }\n  // ---\n\n\n  // UPDATE INPUT VALUES OF TASK PAGE\n  function updateTaskTitleValue(e, target) {\n    // console.log(e.target.value)\n    // console.log(target.title)\n    target.title = e.target.value;\n    updateAll();\n  }\n  function updateTaskTagValue(e, target) {\n    target.tag = e.target.value;\n    updateAll();\n  }\n  function updateTaskContentValue(e, target) {\n    target.content = e.target.value;\n    updateAll();\n  }\n\n  // Toggle Priority Button (Comment)\n  function togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                  console.log(comment.isPriority)\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isPriority = !comment.isPriority;\n                }\n              })\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n  }\n\n  // Toggle Like Button (Comment)\n  function toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isLiked = !comment.isLiked;\n                }\n              })\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n  }\n\n\n  // Delete Button (Comment)\n  function deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id) {\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        if (currentTaskType === 'To Do') {\n          // console.log(project.tasks.toDo);\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          // console.log(project.tasks.inProgress);\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              })\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          // console.log(project.tasks.complete);\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              // console.log(task.comments);\n              task.comments.filter(comment => {\n                if (comment.id === id) {\n                  comment.isDeleted = true;\n                }\n              })\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n  }\n\n  // Create New Comment\n  const [commentInputValue, setCommentInputValue] = useState('');\n  function updateCommentInputValue(e) {\n    setCommentInputValue(e.target.value);\n    updateAll();\n  }\n  function createNewComment(currentProjectId, currentTaskId, currentTaskType) {\n    if (commentInputValue !== '') {\n      userData.projects.filter(project => {\n        if (project.id === currentProjectId) {\n          if (currentTaskType === 'To Do') {\n            // console.log(project.tasks.toDo);\n            project.tasks.toDo.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push(\n                  {\n                    \"id\": task.comments.length + 1,\n                    \"author\": userData.username,\n                    \"content\": commentInputValue,\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  }\n                );\n              }\n            })\n          } else if (currentTaskType === 'In Progress') {\n            // console.log(project.tasks.inProgress);\n            project.tasks.inProgress.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push(\n                  {\n                    \"id\": task.comments.length + 1,\n                    \"author\": userData.username,\n                    \"content\": commentInputValue,\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  }\n                );\n              }\n            })\n          } else if (currentTaskType === 'Complete') {\n            // console.log(project.tasks.complete);\n            project.tasks.complete.filter(task => {\n              if (task.id === currentTaskId) {\n                // console.log(task);\n                task.comments.push(\n                  {\n                    \"id\": task.comments.length + 1,\n                    \"author\": userData.username,\n                    \"content\": commentInputValue,\n                    \"dateCreated\": getFullDate(),\n                    \"timeCreated\": getCurrentTime(),\n                    \"isPriority\": false,\n                    \"isLiked\": false,\n                    \"isDeleted\": false\n                  }\n                );\n              }\n            })\n          }\n        }\n      })\n      setCommentInputValue('');\n      updateAll();\n    }\n  }\n\n  function deleteProjectButton(currentProjectId) {\n    // console.log(currentProjectId)\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        project.isDeleted = true;\n        // console.log(project);\n        createNewReport(\n          'Project Deleted',\n          `'${project.title}' was deleted by ${userData.username}.`,\n          getCurrentTime(),\n          getFullDate(),\n          'Warning',\n          false,\n          false\n        )\n      }\n    })\n    updateAll();\n    setCurrentPageName('Projects');\n  }\n\n  function deleteTaskButton(currentProjectId, currentTaskId, currentTaskType) {\n    // console.log('Task deleted')\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        // console.log(project)\n        if (currentTaskType === 'To Do') {\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true;\n              // console.log(task)\n              createNewReport(\n                'Task Deleted',\n                `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'To Do' category at the time of deletion.`,\n                getCurrentTime(),\n                getFullDate(),\n                'Warning',\n                false,\n                false\n              )\n            }\n          })\n        } else if (currentTaskType === 'In Progress') {\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true;\n              // console.log(task)\n              createNewReport(\n                'Task Deleted',\n                `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'In Progress' category at the time of deletion.`,\n                getCurrentTime(),\n                getFullDate(),\n                'Warning',\n                false,\n                false\n              )\n            }\n          })\n        } else if (currentTaskType === 'Complete') {\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              task.isDeleted = true;\n              // console.log(task)\n              createNewReport(\n                'Task Deleted',\n                `A task with the title of '${task.title}' was deleted from project '${project.title}' by ${userData.username}. This task was in the 'Complete' category at the time of deletion.`,\n                getCurrentTime(),\n                getFullDate(),\n                'Warning',\n                false,\n                false\n              )\n            }\n          })\n        }\n      }\n    })\n    updateAll();\n    setCurrentPageName('Project Page');\n  }\n\n  // Change Task Status\n  function changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId) {\n    // console.log(changeToStatus);\n    userData.projects.filter(project => {\n      if (project.id === currentProjectId) {\n        // console.log(project);\n        if (currentTaskType === 'To Do') {\n          project.tasks.toDo.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task };\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n              task.isDeleted = true;\n              // console.log(project);\n            }\n          });\n        } else if (currentTaskType === 'In Progress') {\n          project.tasks.inProgress.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task };\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n              task.isDeleted = true;\n              // console.log(task);\n            }\n          });\n        } else if (currentTaskType === 'Complete') {\n          project.tasks.complete.filter(task => {\n            if (task.id === currentTaskId) {\n              const newTask = { ...task };\n              if (changeToStatus === 'To Do') {\n                newTask.id = project.tasks.toDo.length + 1;\n                project.tasks.toDo.push(newTask);\n                openTaskPage(project.tasks.toDo.length, 'To Do', newTask.id);\n              } else if (changeToStatus === 'In Progress') {\n                newTask.id = project.tasks.inProgress.length + 1;\n                project.tasks.inProgress.push(newTask);\n                openTaskPage(project.tasks.inProgress.length, 'In Progress', newTask.id);\n              } else if (changeToStatus === 'Complete') {\n                newTask.id = project.tasks.complete.length + 1;\n                project.tasks.complete.push(newTask);\n                openTaskPage(project.tasks.complete.length, 'Complete', newTask.id);\n              }\n              task.isDeleted = true;\n              // console.log(task);\n            }\n          });\n        }\n      }\n    })\n    setCurrentProjectId(currentProjectId);\n    updateAll();\n  }\n\n  function deleteMessage(id) {\n    // console.log(`Message ${id} is deleted`);\n    userData.messages.filter(message => {\n      if (message.id === id) {\n        message.isDeleted = true;\n      }\n    });\n    updateAll();\n  }\n\n  function deleteReport(id) {\n    // console.log(`Report ${id} is deleted`);\n    userData.reports.filter(report => {\n      if (report.id === id) {\n        report.isDeleted = true;\n      }\n    });\n    updateAll();\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className={asideIsOpen ? 'aside-container' : 'aside-container aside-container-disabled'}>\n          <IconButton\n            iconClass={`aside-container__button ${asideIsOpen ? 'fa-solid fa-angles-left' : 'fa-solid fa-angles-right'}`}\n            handleClick={() => toggleAside()}\n          />\n          <Aside\n            asideIsOpen={asideIsOpen}\n            handleClick={(title) => asideButtonClicked(title)}\n            updateCurrentPageName={() => updateCurrentPageName('Projects')}\n            userData={userData}\n            createNewProject={(projectName) => createNewProject(projectName)}\n            openProjectPage={(id) => openProjectPage(id)}\n          />\n        </div>\n        <div className=\"main-container\">\n          <Main\n            currentPageName={currentPageName}\n            updateCurrentPageName={(page) => updateCurrentPageName(page)}\n            getYear={() => getYear()}\n            userData={userData}\n            updateMessageIsRead={(id) => updateMessageIsRead(id)}\n            updateReportIsRead={(id) => updateReportIsRead(id)}\n            createNewProject={(projectName) => createNewProject(projectName)}\n            openProjectPage={(id) => openProjectPage(id)}\n            currentProjectId={currentProjectId}\n            openProjects={() => openProjects()}\n            updateInputValue={(e, target) => updateInputValue(e, target)}\n            asideIsOpen={asideIsOpen}\n            createNewTask={(projectId, taskType) => createNewTask(projectId, taskType)}\n            openTaskPage={(taskId, taskType, currentProjectId) => openTaskPage(taskId, taskType, currentProjectId)}\n            currentTaskId={currentTaskId}\n            currentTaskType={currentTaskType}\n            updateCurrentProject={(id) => updateCurrentProject(id)}\n            taskBackButtonClicked={() => taskBackButtonClicked()}\n            updateTaskTitleValue={(e, target) => updateTaskTitleValue(e, target)}\n            updateTaskTagValue={(e, target) => updateTaskTagValue(e, target)}\n            updateTaskContentValue={(e, target) => updateTaskContentValue(e, target)}\n            togglePriorityButton={(currentProjectId, currentTaskType, currentTaskId, id) => togglePriorityButton(currentProjectId, currentTaskType, currentTaskId, id)}\n            toggleLikeButton={(currentProjectId, currentTaskType, currentTaskId, id) => toggleLikeButton(currentProjectId, currentTaskType, currentTaskId, id)}\n            deleteCommentButton={(currentProjectId, currentTaskType, currentTaskId, id) => deleteCommentButton(currentProjectId, currentTaskType, currentTaskId, id)}\n            createNewComment={(currentProjectId, currentTaskId, currentTaskType) => createNewComment(currentProjectId, currentTaskId, currentTaskType)}\n            updateCommentInputValue={(e) => updateCommentInputValue(e)}\n            commentInputValue={commentInputValue}\n            deleteProjectButton={(currentProjectId) => deleteProjectButton(currentProjectId)}\n            deleteTaskButton={(currentProjectId, currentTaskId, currentTaskType) => deleteTaskButton(currentProjectId, currentTaskId, currentTaskType)}\n            changeTaskStatus={(changeToStatus, currentProjectId, currentTaskType, currentTaskId) => changeTaskStatus(changeToStatus, currentProjectId, currentTaskType, currentTaskId)}\n            openReports={() => openReports()}\n            openMessages={() => openMessages()}\n            deleteMessage={(id) => deleteMessage(id)}\n            deleteReport={(id) => deleteReport(id)}\n          />\n        </div>\n      </div>\n    </div >\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}